/* SCE CONFIDENTIAL
 * PlayStation(R)Suite SDK 0.98.2
 * Copyright (C) 2012 Sony Computer Entertainment Inc.
 * All Rights Reserved.
 */
/*
void main(	float4 in a_Position  : POSITION,
			float3 in a_Normal    : NORMAL,
			float4 out v_Position : POSITION,
			float4 out v_Color	  : COLOR0,
			uniform float4 IAmbient,
			uniform float4 IDiffuse,
			uniform float4 KAmbient,
			uniform float4 KDiffuse,
            uniform float4 KSpecular,
            uniform float Shininess,
						
			uniform float3   LocalLightPosition,
			uniform float3   EyePosition,
			uniform float4x4 WorldViewProj
		   )
{
	v_Position	= mul( a_Position, WorldViewProj );

    float3 L = normalize( LocalLightPosition - a_Position.xyz );
	float3 E = normalize( EyePosition - a_Position.xyz );
    float3 N = a_Normal;
	float3 R = -E + 2.0f * dot(N, E) * N;
	
    float diffuseL = max(0, dot(N, L));
    float4 ambient = IAmbient * KAmbient;
    float4 diffuse = IDiffuse * KDiffuse * diffuseL;

    if( diffuseL <= 0.0f ){
        v_Color = ambient + diffuse;
    }else{
        float specularL = pow(max(0, dot(L, R)), Shininess);
        v_Color = ambient + diffuse + KSpecular * specularL;
    }
}

*/

// glslv output by Cg compiler
// cgc version 2.2.0017, build date Jan 29 2010
// command line args: -profile glslv
// source file: input_v.txt
//vendor NVIDIA Corporation
//version 2.2.0.17
//profile glslv
//program main
//semantic main.IAmbient
//semantic main.IDiffuse
//semantic main.KAmbient
//semantic main.KDiffuse
//semantic main.KSpecular
//semantic main.Shininess
//semantic main.LocalLightPosition
//semantic main.EyePosition
//semantic main.WorldViewProj
//var float4 IAmbient :  : _IAmbient1 : 4 : 1
//var float4 IDiffuse :  : _IDiffuse1 : 5 : 1
//var float4 KAmbient :  : _KAmbient1 : 6 : 1
//var float4 KDiffuse :  : _KDiffuse1 : 7 : 1
//var float4 KSpecular :  : _KSpecular1 : 8 : 1
//var float Shininess :  : _Shininess1 : 9 : 1
//var float3 LocalLightPosition :  : _LocalLightPosition1 : 10 : 1
//var float3 EyePosition :  : _EyePosition1 : 11 : 1
//var float4x4 WorldViewProj :  : _WorldViewProj1[0], 4 : 12 : 1
//var float4 a_Position : $vin.POSITION : POSITION : 0 : 1
//var float3 a_Normal : $vin.NORMAL : NORMAL : 1 : 1
//var float4 v_Position : $vout.POSITION : POSITION : 2 : 1
//var float4 v_Color : $vout.COLOR0 : COLOR0 : 3 : 1

attribute vec4 a_Position;
attribute vec3 a_Normal;
varying vec4 v_Position;
varying vec4 v_Color;
uniform vec4 IAmbient;
uniform vec4 IDiffuse;
uniform vec4 KAmbient;
uniform vec4 KDiffuse;
uniform vec4 KSpecular;
uniform float Shininess;
uniform vec3 LocalLightPosition;
uniform vec3 EyePosition;
uniform mat4 WorldViewProj;
vec4 _r0010;
vec3 _TMP11;
vec3 _v0012;
float _x0016;
vec3 _TMP17;
vec3 _v0018;
float _x0022;
float _b0028;
float _b0032;
float _x0034;

 // main procedure, the original name was main
void main()
{

    vec4 _v_Position;
    vec4 _v_Color;
    vec3 _R;
    float _diffuseL;
    vec4 _ambient;
    vec4 _diffuse;
    float _specularL1;

    _r0010 = a_Position.x*WorldViewProj[0];
    _r0010 = _r0010 + a_Position.y*WorldViewProj[1];
    _r0010 = _r0010 + a_Position.z*WorldViewProj[2];
    _r0010 = _r0010 + a_Position.w*WorldViewProj[3];
    _v_Position = _r0010;
    _v0012 = LocalLightPosition - a_Position.xyz;
    _x0016 = dot(_v0012, _v0012);
    _TMP11 = inversesqrt(_x0016)*_v0012;
    _v0018 = EyePosition - a_Position.xyz;
    _x0022 = dot(_v0018, _v0018);
    _TMP17 = inversesqrt(_x0022)*_v0018;
    _R = -_TMP17 + (2.00000000E+000*dot(a_Normal, _TMP17))*a_Normal;
    _b0028 = dot(a_Normal, _TMP11);
    _diffuseL = max(0.00000000E+000, _b0028);
    _ambient = IAmbient*KAmbient;
    _diffuse = (IDiffuse*KDiffuse)*_diffuseL;
    if (_diffuseL <= 0.00000000E+000) { // if begin
        _v_Color = _ambient + _diffuse;
    } else {
        _b0032 = dot(_TMP11, _R);
        _x0034 = max(0.00000000E+000, _b0032);
        _specularL1 = pow(_x0034, Shininess);
        _v_Color = _ambient + _diffuse + KSpecular*_specularL1;
    } // end if
    v_Color = _v_Color;
    gl_Position = _r0010;
} // main end
