//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2013 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

namespace OpenTK.Graphics.ES20
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573
    #pragma warning disable 626

    partial class GL
    { 
        public static partial class Ext
        {
            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glActiveProgramEXT")]
            [CLSCompliant(false)]
            public static void ActiveProgram(Int32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glActiveProgramEXT")]
            [CLSCompliant(false)]
            public static void ActiveProgram(UInt32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Set the active program object for a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the program pipeline object to set the active program object for.
            /// </param>
            /// <param name="program"> 
            /// Specifies the program object to set as the active program pipeline object pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glActiveShaderProgramEXT")]
            [CLSCompliant(false)]
            public static void ActiveShaderProgram(Int32 pipeline, Int32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Set the active program object for a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the program pipeline object to set the active program object for.
            /// </param>
            /// <param name="program"> 
            /// Specifies the program object to set as the active program pipeline object pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glActiveShaderProgramEXT")]
            [CLSCompliant(false)]
            public static void ActiveShaderProgram(UInt32 pipeline, UInt32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delimit the boundaries of a query object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of SamplesPassed, AnySamplesPassed, AnySamplesPassedConservative, PrimitivesGenerated, TransformFeedbackPrimitivesWritten, or TimeElapsed.
            /// </param>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glBeginQueryEXT")]
            [CLSCompliant(false)]
            public static void BeginQuery(OpenTK.Graphics.ES20.QueryTarget target, Int32 id) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delimit the boundaries of a query object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target type of query object established between glBeginQuery and the subsequent glEndQuery. The symbolic constant must be one of SamplesPassed, AnySamplesPassed, AnySamplesPassedConservative, PrimitivesGenerated, TransformFeedbackPrimitivesWritten, or TimeElapsed.
            /// </param>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glBeginQueryEXT")]
            [CLSCompliant(false)]
            public static void BeginQuery(OpenTK.Graphics.ES20.QueryTarget target, UInt32 id) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind a program pipeline to the current context
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of the pipeline object to bind to the context.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glBindProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static void BindProgramPipeline(Int32 pipeline) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind a program pipeline to the current context
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of the pipeline object to bind to the context.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glBindProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static void BindProgramPipeline(UInt32 pipeline) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_blend_minmax]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="mode"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [AutoGenerated(Category = "EXT_blend_minmax", Version = "", EntryPoint = "glBlendEquationEXT")]
            public static void BlendEquation(OpenTK.Graphics.ES20.BlendEquationMode mode) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="mode"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationiEXT")]
            [CLSCompliant(false)]
            public static void BlendEquation(Int32 buf, OpenTK.Graphics.ES20.BlendEquationMode mode) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
            /// </summary>
            /// <param name="buf"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="mode"> 
            /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationiEXT")]
            [CLSCompliant(false)]
            public static void BlendEquation(UInt32 buf, OpenTK.Graphics.ES20.BlendEquationMode mode) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf"> 
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="modeRGB"> 
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="modeAlpha"> 
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationSeparateiEXT")]
            [CLSCompliant(false)]
            public static void BlendEquationSeparate(Int32 buf, OpenTK.Graphics.ES20.BlendEquationMode modeRGB, OpenTK.Graphics.ES20.BlendEquationMode modeAlpha) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Set the RGB blend equation and the alpha blend equation separately
            /// </summary>
            /// <param name="buf"> 
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="modeRGB"> 
            /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            /// <param name="modeAlpha"> 
            /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendEquationSeparateiEXT")]
            [CLSCompliant(false)]
            public static void BlendEquationSeparate(UInt32 buf, OpenTK.Graphics.ES20.BlendEquationMode modeRGB, OpenTK.Graphics.ES20.BlendEquationMode modeAlpha) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify pixel arithmetic
            /// </summary>
            /// <param name="buf"> 
            /// Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
            /// </param>
            /// <param name="src"> 
            /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="dst"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFunciEXT")]
            [CLSCompliant(false)]
            public static void BlendFunc(Int32 buf, OpenTK.Graphics.ES20.All src, OpenTK.Graphics.ES20.All dst) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify pixel arithmetic
            /// </summary>
            /// <param name="buf"> 
            /// Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
            /// </param>
            /// <param name="src"> 
            /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="dst"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFunciEXT")]
            [CLSCompliant(false)]
            public static void BlendFunc(UInt32 buf, OpenTK.Graphics.ES20.All src, OpenTK.Graphics.ES20.All dst) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="buf"> 
            /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
            /// </param>
            /// <param name="srcRGB"> 
            /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
            /// </param>
            /// <param name="dstRGB"> 
            /// Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha"> 
            /// Specified how the alpha source blending factor is computed.  The same symbolic constants are accepted as for srcRGB. The initial value is One.
            /// </param>
            /// <param name="dstAlpha"> 
            /// Specified how the alpha destination blending factor is computed.  The same symbolic constants are accepted as for dstRGB. The initial value is Zero.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFuncSeparateiEXT")]
            [CLSCompliant(false)]
            public static void BlendFuncSeparate(Int32 buf, OpenTK.Graphics.ES20.All srcRGB, OpenTK.Graphics.ES20.All dstRGB, OpenTK.Graphics.ES20.All srcAlpha, OpenTK.Graphics.ES20.All dstAlpha) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Specify pixel arithmetic for RGB and alpha components separately
            /// </summary>
            /// <param name="buf"> 
            /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
            /// </param>
            /// <param name="srcRGB"> 
            /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
            /// </param>
            /// <param name="dstRGB"> 
            /// Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
            /// </param>
            /// <param name="srcAlpha"> 
            /// Specified how the alpha source blending factor is computed.  The same symbolic constants are accepted as for srcRGB. The initial value is One.
            /// </param>
            /// <param name="dstAlpha"> 
            /// Specified how the alpha destination blending factor is computed.  The same symbolic constants are accepted as for dstRGB. The initial value is Zero.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glBlendFuncSeparateiEXT")]
            [CLSCompliant(false)]
            public static void BlendFuncSeparate(UInt32 buf, OpenTK.Graphics.ES20.All srcRGB, OpenTK.Graphics.ES20.All dstRGB, OpenTK.Graphics.ES20.All srcAlpha, OpenTK.Graphics.ES20.All dstAlpha) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Enable and disable writing of frame buffer color components
            /// </summary>
            /// <param name="index"> 
            /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
            /// </param>
            /// <param name="r"> 
            /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
            /// </param>
            /// <param name="g"> 
            /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
            /// </param>
            /// <param name="b"> 
            /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
            /// </param>
            /// <param name="a"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glColorMaskiEXT")]
            [CLSCompliant(false)]
            public static void ColorMask(Int32 index, bool r, bool g, bool b, bool a) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Enable and disable writing of frame buffer color components
            /// </summary>
            /// <param name="index"> 
            /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
            /// </param>
            /// <param name="r"> 
            /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
            /// </param>
            /// <param name="g"> 
            /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
            /// </param>
            /// <param name="b"> 
            /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
            /// </param>
            /// <param name="a"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glColorMaskiEXT")]
            [CLSCompliant(false)]
            public static void ColorMask(UInt32 index, bool r, bool g, bool b, bool a) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_copy_image]
            /// Perform a raw data copy between two images
            /// </summary>
            /// <param name="srcName"> 
            /// The name of a texture or renderbuffer object from which to copy.
            /// </param>
            /// <param name="srcTarget"> 
            /// The target representing the namespace of the source name srcName.
            /// </param>
            /// <param name="srcLevel"> 
            /// The mipmap level to read from the source.
            /// </param>
            /// <param name="srcX"> 
            /// The X coordinate of the left edge of the souce region to copy.
            /// </param>
            /// <param name="srcY"> 
            /// The Y coordinate of the top edge of the souce region to copy.
            /// </param>
            /// <param name="srcZ"> 
            /// The Z coordinate of the near edge of the souce region to copy.
            /// </param>
            /// <param name="dstName"> 
            /// The name of a texture or renderbuffer object to which to copy.
            /// </param>
            /// <param name="dstTarget"> 
            /// The target representing the namespace of the destination name dstName.
            /// </param>
            /// <param name="dstLevel"> 
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstX"> 
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstY"> 
            /// The Y coordinate of the top edge of the destination region.
            /// </param>
            /// <param name="dstZ"> 
            /// The Z coordinate of the near edge of the destination region.
            /// </param>
            /// <param name="srcWidth"> 
            /// The width of the region to be copied.
            /// </param>
            /// <param name="srcHeight"> 
            /// The height of the region to be copied.
            /// </param>
            /// <param name="srcDepth"> 
            /// The depth of the region to be copied.
            /// </param>
            [AutoGenerated(Category = "EXT_copy_image", Version = "", EntryPoint = "glCopyImageSubDataEXT")]
            [CLSCompliant(false)]
            public static void CopyImageSubData(Int32 srcName, OpenTK.Graphics.ES20.All srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, Int32 dstName, OpenTK.Graphics.ES20.All dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_copy_image]
            /// Perform a raw data copy between two images
            /// </summary>
            /// <param name="srcName"> 
            /// The name of a texture or renderbuffer object from which to copy.
            /// </param>
            /// <param name="srcTarget"> 
            /// The target representing the namespace of the source name srcName.
            /// </param>
            /// <param name="srcLevel"> 
            /// The mipmap level to read from the source.
            /// </param>
            /// <param name="srcX"> 
            /// The X coordinate of the left edge of the souce region to copy.
            /// </param>
            /// <param name="srcY"> 
            /// The Y coordinate of the top edge of the souce region to copy.
            /// </param>
            /// <param name="srcZ"> 
            /// The Z coordinate of the near edge of the souce region to copy.
            /// </param>
            /// <param name="dstName"> 
            /// The name of a texture or renderbuffer object to which to copy.
            /// </param>
            /// <param name="dstTarget"> 
            /// The target representing the namespace of the destination name dstName.
            /// </param>
            /// <param name="dstLevel"> 
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstX"> 
            /// The X coordinate of the left edge of the destination region.
            /// </param>
            /// <param name="dstY"> 
            /// The Y coordinate of the top edge of the destination region.
            /// </param>
            /// <param name="dstZ"> 
            /// The Z coordinate of the near edge of the destination region.
            /// </param>
            /// <param name="srcWidth"> 
            /// The width of the region to be copied.
            /// </param>
            /// <param name="srcHeight"> 
            /// The height of the region to be copied.
            /// </param>
            /// <param name="srcDepth"> 
            /// The depth of the region to be copied.
            /// </param>
            [AutoGenerated(Category = "EXT_copy_image", Version = "", EntryPoint = "glCopyImageSubDataEXT")]
            [CLSCompliant(false)]
            public static void CopyImageSubData(UInt32 srcName, OpenTK.Graphics.ES20.All srcTarget, Int32 srcLevel, Int32 srcX, Int32 srcY, Int32 srcZ, UInt32 dstName, OpenTK.Graphics.ES20.All dstTarget, Int32 dstLevel, Int32 dstX, Int32 dstY, Int32 dstZ, Int32 srcWidth, Int32 srcHeight, Int32 srcDepth) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Create a stand-alone program from an array of null-terminated source code strings
            /// </summary>
            /// <param name="type"> 
            /// Specifies the type of shader to create.
            /// </param>
            /// <param name="@string"> 
            /// Specifies the number of source code strings in the array strings.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glCreateShaderProgramEXT")]
            public static Int32 CreateShaderProgram(OpenTK.Graphics.ES20.All type, String @string) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Create a stand-alone program from an array of null-terminated source code strings
            /// </summary>
            /// <param name="type"> 
            /// Specifies the type of shader to create.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of source code strings in the array strings.
            /// </param>
            /// <param name="strings">[length: count] 
            /// Specifies the address of an array of pointers to source code strings from which to create the program object.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glCreateShaderProgramvEXT")]
            public static Int32 CreateShaderProgram(OpenTK.Graphics.ES20.All type, Int32 count, String[] strings) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void DeleteProgramPipeline(Int32 pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void DeleteProgramPipeline(UInt32 pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void DeleteProgramPipelines(Int32 n, Int32[] pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void DeleteProgramPipelines(Int32 n, ref Int32 pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static unsafe void DeleteProgramPipelines(Int32 n, Int32* pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void DeleteProgramPipelines(Int32 n, UInt32[] pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void DeleteProgramPipelines(Int32 n, ref UInt32 pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Delete program pipeline objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline objects to delete.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of names of program pipeline objects to delete.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glDeleteProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static unsafe void DeleteProgramPipelines(Int32 n, UInt32* pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="ids">[length: n] 
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static void DeleteQuery(Int32 ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="ids">[length: n] 
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static void DeleteQuery(UInt32 ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static void DeleteQueries(Int32 n, Int32[] ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static void DeleteQueries(Int32 n, ref Int32 ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static unsafe void DeleteQueries(Int32 n, Int32* ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static void DeleteQueries(Int32 n, UInt32[] ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static void DeleteQueries(Int32 n, ref UInt32 ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Delete named query objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query objects to be deleted.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array of query objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glDeleteQueriesEXT")]
            [CLSCompliant(false)]
            public static unsafe void DeleteQueries(Int32 n, UInt32* ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glDisableiEXT")]
            [CLSCompliant(false)]
            public static void Disable(OpenTK.Graphics.ES20.All target, Int32 index) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glDisableiEXT")]
            [CLSCompliant(false)]
            public static void Disable(OpenTK.Graphics.ES20.All target, UInt32 index) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_discard_framebuffer]</summary>
            /// <param name="target"></param>
            /// <param name="numAttachments"></param>
            /// <param name="attachments">[length: numAttachments]</param>
            [AutoGenerated(Category = "EXT_discard_framebuffer", Version = "", EntryPoint = "glDiscardFramebufferEXT")]
            [CLSCompliant(false)]
            public static void DiscardFramebuffer(OpenTK.Graphics.ES20.All target, Int32 numAttachments, OpenTK.Graphics.ES20.All[] attachments) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_discard_framebuffer]</summary>
            /// <param name="target"></param>
            /// <param name="numAttachments"></param>
            /// <param name="attachments">[length: numAttachments]</param>
            [AutoGenerated(Category = "EXT_discard_framebuffer", Version = "", EntryPoint = "glDiscardFramebufferEXT")]
            [CLSCompliant(false)]
            public static void DiscardFramebuffer(OpenTK.Graphics.ES20.All target, Int32 numAttachments, ref OpenTK.Graphics.ES20.All attachments) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_discard_framebuffer]</summary>
            /// <param name="target"></param>
            /// <param name="numAttachments"></param>
            /// <param name="attachments">[length: numAttachments]</param>
            [AutoGenerated(Category = "EXT_discard_framebuffer", Version = "", EntryPoint = "glDiscardFramebufferEXT")]
            [CLSCompliant(false)]
            public static unsafe void DiscardFramebuffer(OpenTK.Graphics.ES20.All target, Int32 numAttachments, OpenTK.Graphics.ES20.All* attachments) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="start"> 
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawArraysInstancedEXT")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 start, Int32 count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs"> 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers", Version = "", EntryPoint = "glDrawBuffersEXT")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, OpenTK.Graphics.ES20.DrawBufferMode[] bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs"> 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers", Version = "", EntryPoint = "glDrawBuffersEXT")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, ref OpenTK.Graphics.ES20.DrawBufferMode bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs"> 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_buffers", Version = "", EntryPoint = "glDrawBuffersEXT")]
            [CLSCompliant(false)]
            public static unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.ES20.DrawBufferMode* bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="n"></param>
            /// <param name="location">[length: n]</param>
            /// <param name="indices">[length: n]</param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glDrawBuffersIndexedEXT")]
            [CLSCompliant(false)]
            public static void DrawBuffersIndexed(Int32 n, OpenTK.Graphics.ES20.All[] location, Int32[] indices) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="n"></param>
            /// <param name="location">[length: n]</param>
            /// <param name="indices">[length: n]</param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glDrawBuffersIndexedEXT")]
            [CLSCompliant(false)]
            public static void DrawBuffersIndexed(Int32 n, ref OpenTK.Graphics.ES20.All location, ref Int32 indices) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="n"></param>
            /// <param name="location">[length: n]</param>
            /// <param name="indices">[length: n]</param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glDrawBuffersIndexedEXT")]
            [CLSCompliant(false)]
            public static unsafe void DrawBuffersIndexed(Int32 n, OpenTK.Graphics.ES20.All* location, Int32* indices) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_instanced|EXT_instanced_arrays]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "EXT_draw_instanced|EXT_instanced_arrays", Version = "", EntryPoint = "glDrawElementsInstancedEXT")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target"> 
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glEnableiEXT")]
            [CLSCompliant(false)]
            public static void Enable(OpenTK.Graphics.ES20.All target, Int32 index) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Enable or disable server-side GL capabilities
            /// </summary>
            /// <param name="target"> 
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glEnableiEXT")]
            [CLSCompliant(false)]
            public static void Enable(OpenTK.Graphics.ES20.All target, UInt32 index) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glEndQueryEXT")]
            public static void EndQuery(OpenTK.Graphics.ES20.QueryTarget target) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Indicate modifications to a range of a mapped buffer
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the flush operation. target must be ArrayBuffer, CopyReadBuffer, CopyWriteBuffer, DispatchIndirectBuffer, DrawIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer, or UniformBuffer.
            /// </param>
            /// <param name="offset"> 
            /// Specifies the start of the buffer subrange, in basic machine units.
            /// </param>
            /// <param name="length"> 
            /// Specifies the length of the buffer subrange, in basic machine units.
            /// </param>
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glFlushMappedBufferRangeEXT")]
            public static void FlushMappedBufferRange(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr length) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All textarget, Int32 texture, Int32 level, Int32 samples) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multisampled_render_to_texture]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="samples"></param>
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glFramebufferTexture2DMultisampleEXT")]
            [CLSCompliant(false)]
            public static void FramebufferTexture2DMultisample(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All textarget, UInt32 texture, Int32 level, Int32 samples) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_geometry_shader]
            /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment"> 
            /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
            /// </param>
            /// <param name="texture"> 
            /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
            /// </param>
            /// <param name="level"> 
            /// Specifies the mipmap level of texture to attach.
            /// </param>
            [AutoGenerated(Category = "EXT_geometry_shader", Version = "", EntryPoint = "glFramebufferTextureEXT")]
            [CLSCompliant(false)]
            public static void FramebufferTexture(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, Int32 texture, Int32 level) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_geometry_shader]
            /// Attach a level of a texture object as a logical buffer to the currently bound framebuffer object
            /// </summary>
            /// <param name="target"> 
            /// Specifies the framebuffer target. target must be DrawFramebuffer, ReadFramebuffer, or Framebuffer. Framebuffer is equivalent to DrawFramebuffer.
            /// </param>
            /// <param name="attachment"> 
            /// Specifies the attachment point of the framebuffer. attachment must be ColorAttachmenti, DepthAttachment, StencilAttachment or DepthStencilAttachment.
            /// </param>
            /// <param name="texture"> 
            /// Specifies the texture object to attach to the framebuffer attachment point named by attachment.
            /// </param>
            /// <param name="level"> 
            /// Specifies the mipmap level of texture to attach.
            /// </param>
            [AutoGenerated(Category = "EXT_geometry_shader", Version = "", EntryPoint = "glFramebufferTextureEXT")]
            [CLSCompliant(false)]
            public static void FramebufferTexture(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, UInt32 texture, Int32 level) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static Int32 GenProgramPipeline() { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void GenProgramPipelines(Int32 n, [OutAttribute] Int32[] pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void GenProgramPipelines(Int32 n, [OutAttribute] out Int32 pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static unsafe void GenProgramPipelines(Int32 n, [OutAttribute] Int32* pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void GenProgramPipelines(Int32 n, [OutAttribute] UInt32[] pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static void GenProgramPipelines(Int32 n, [OutAttribute] out UInt32 pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Reserve program pipeline object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of program pipeline object names to reserve.
            /// </param>
            /// <param name="pipelines">[length: n] 
            /// Specifies an array of into which the reserved names will be written.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGenProgramPipelinesEXT")]
            [CLSCompliant(false)]
            public static unsafe void GenProgramPipelines(Int32 n, [OutAttribute] UInt32* pipelines) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static Int32 GenQuery() { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static void GenQueries(Int32 n, [OutAttribute] Int32[] ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static void GenQueries(Int32 n, [OutAttribute] out Int32 ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static unsafe void GenQueries(Int32 n, [OutAttribute] Int32* ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static void GenQueries(Int32 n, [OutAttribute] UInt32[] ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static void GenQueries(Int32 n, [OutAttribute] out UInt32 ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Generate query object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of query object names to be generated.
            /// </param>
            /// <param name="ids">[length: n] 
            /// Specifies an array in which the generated query object names are stored.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGenQueriesEXT")]
            [CLSCompliant(false)]
            public static unsafe void GenQueries(Int32 n, [OutAttribute] UInt32* ids) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetGraphicsResetStatusEXT")]
            public static OpenTK.Graphics.ES20.All GetGraphicsResetStatus() { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES20.GetIndexedPName target, Int32 index, [OutAttribute] Int32[] data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES20.GetIndexedPName target, Int32 index, [OutAttribute] out Int32 data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger(OpenTK.Graphics.ES20.GetIndexedPName target, Int32 index, [OutAttribute] Int32* data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES20.GetIndexedPName target, UInt32 index, [OutAttribute] Int32[] data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static void GetInteger(OpenTK.Graphics.ES20.GetIndexedPName target, UInt32 index, [OutAttribute] out Int32 data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="target"></param>
            /// <param name="index"></param>
            /// <param name="data"></param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glGetIntegeri_vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger(OpenTK.Graphics.ES20.GetIndexedPName target, UInt32 index, [OutAttribute] Int32* data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformfvEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(Int32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="bufSize"></param>
            /// <param name="@params">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glGetnUniformivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetnUniform(UInt32 program, Int32 location, Int32 bufSize, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params"> 
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params"> 
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params"> 
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramPipeline(Int32 pipeline, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params"> 
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params"> 
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Retrieve properties of a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object whose parameter retrieve.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to retrieve.
            /// </param>
            /// <param name="@params"> 
            /// Specifies the address of a variable into which will be written the value or values of pname for pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glGetProgramPipelineivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetProgramPipeline(UInt32 pipeline, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryivEXT")]
            [CLSCompliant(false)]
            public static void GetQuery(OpenTK.Graphics.ES20.QueryTarget target, OpenTK.Graphics.ES20.GetQueryParam pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryivEXT")]
            [CLSCompliant(false)]
            public static void GetQuery(OpenTK.Graphics.ES20.QueryTarget target, OpenTK.Graphics.ES20.GetQueryParam pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQuery(OpenTK.Graphics.ES20.QueryTarget target, OpenTK.Graphics.ES20.GetQueryParam pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] Int64[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] out Int64 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] Int64* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] Int64[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] out Int64 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjecti64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] Int64* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(Int32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectui64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] UInt64[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectui64vEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] out UInt64 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params">[length: pname] 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glGetQueryObjectui64vEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] UInt64* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryObjectuivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] UInt32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryObjectuivEXT")]
            [CLSCompliant(false)]
            public static void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] out UInt32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Return parameters of a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies the name of a query object.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the symbolic name of a query object parameter. Accepted values are QueryResult or QueryResultAvailable.
            /// </param>
            /// <param name="@params"> 
            /// If a buffer is bound to the QueryResultBuffer target, then params is treated as an offset to a location within that buffer's data store to receive the result of the query. If no buffer is bound to QueryResultBuffer, then params is treated as an address in client memory of a variable to receive the resulting data.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glGetQueryObjectuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetQueryObject(UInt32 id, OpenTK.Graphics.ES20.GetQueryObjectParam pname, [OutAttribute] UInt32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(Int32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] UInt32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] out UInt32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetSamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, [OutAttribute] UInt32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetTexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] UInt32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void GetTexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] out UInt32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glGetTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void GetTexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameter pname, [OutAttribute] UInt32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_debug_marker]</summary>
            /// <param name="length"></param>
            /// <param name="marker"></param>
            [AutoGenerated(Category = "EXT_debug_marker", Version = "", EntryPoint = "glInsertEventMarkerEXT")]
            public static void InsertEventMarker(Int32 length, String marker) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target"> 
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glIsEnablediEXT")]
            [CLSCompliant(false)]
            public static bool IsEnabled(OpenTK.Graphics.ES20.All target, Int32 index) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_draw_buffers_indexed]
            /// Test whether a capability is enabled
            /// </summary>
            /// <param name="target"> 
            /// Specifies a symbolic constant indicating a GL capability.
            /// </param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "EXT_draw_buffers_indexed", Version = "", EntryPoint = "glIsEnablediEXT")]
            [CLSCompliant(false)]
            public static bool IsEnabled(OpenTK.Graphics.ES20.All target, UInt32 index) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Determine if a name corresponds to a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies a value that may be the name of a program pipeline object.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glIsProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static bool IsProgramPipeline(Int32 pipeline) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Determine if a name corresponds to a program pipeline object
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies a value that may be the name of a program pipeline object.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glIsProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static bool IsProgramPipeline(UInt32 pipeline) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Determine if a name corresponds to a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies a value that may be the name of a query object.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glIsQueryEXT")]
            [CLSCompliant(false)]
            public static bool IsQuery(Int32 id) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query|EXT_occlusion_query_boolean]
            /// Determine if a name corresponds to a query object
            /// </summary>
            /// <param name="id"> 
            /// Specifies a value that may be the name of a query object.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query|EXT_occlusion_query_boolean", Version = "", EntryPoint = "glIsQueryEXT")]
            [CLSCompliant(false)]
            public static bool IsQuery(UInt32 id) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_debug_label]</summary>
            /// <param name="type"></param>
            /// <param name="@object"></param>
            /// <param name="length"></param>
            /// <param name="label"></param>
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glLabelObjectEXT")]
            [CLSCompliant(false)]
            public static void LabelObject(OpenTK.Graphics.ES20.All type, Int32 @object, Int32 length, String label) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_debug_label]</summary>
            /// <param name="type"></param>
            /// <param name="@object"></param>
            /// <param name="length"></param>
            /// <param name="label"></param>
            [AutoGenerated(Category = "EXT_debug_label", Version = "", EntryPoint = "glLabelObjectEXT")]
            [CLSCompliant(false)]
            public static void LabelObject(OpenTK.Graphics.ES20.All type, UInt32 @object, Int32 length, String label) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset"> 
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length"> 
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access"> 
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glMapBufferRangeEXT")]
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr length, Int32 access) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_map_buffer_range]
            /// Map a section of a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target buffer is bound.
            /// </param>
            /// <param name="offset"> 
            /// Specifies a the starting offset within the buffer of the range to be mapped.
            /// </param>
            /// <param name="length"> 
            /// Specifies a length of the range to be mapped.
            /// </param>
            /// <param name="access"> 
            /// Specifies a combination of access flags indicating the desired access to the range.
            /// </param>
            [AutoGenerated(Category = "EXT_map_buffer_range", Version = "", EntryPoint = "glMapBufferRangeEXT")]
            [CLSCompliant(false)]
            public static IntPtr MapBufferRange(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr length, UInt32 access) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: primcount] 
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the first and count
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES20.PrimitiveType mode, Int32[] first, Int32[] count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: primcount] 
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the first and count
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawArrays(OpenTK.Graphics.ES20.PrimitiveType mode, ref Int32 first, ref Int32 count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives from array data
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first">[length: primcount] 
            /// Points to an array of starting indices in the enabled arrays.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the first and count
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawArraysEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawArrays(OpenTK.Graphics.ES20.PrimitiveType mode, Int32* first, Int32* count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements(OpenTK.Graphics.ES20.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES20.DrawElementsType type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32[] count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements(OpenTK.Graphics.ES20.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, ref Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements(OpenTK.Graphics.ES20.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES20.DrawElementsType type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multi_draw_arrays]
            /// Render multiple sets of primitives by specifying indices of array data elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count">[length: primcount] 
            /// Points to an array of the elements counts.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: primcount] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the size of the count and indices arrays.
            /// </param>
            [AutoGenerated(Category = "EXT_multi_draw_arrays", Version = "", EntryPoint = "glMultiDrawElementsEXT")]
            [CLSCompliant(false)]
            public static unsafe void MultiDrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32* count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_tessellation_shader]
            /// Specifies the parameters for patch primitives
            /// </summary>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to set. The symbolc constants PatchVertices, PatchDefaultOuterLevel, and PatchDefaultInnerLevel are accepted.
            /// </param>
            /// <param name="value"> 
            /// Specifies the new value for the parameter given by pname.
            /// </param>
            [AutoGenerated(Category = "EXT_tessellation_shader", Version = "", EntryPoint = "glPatchParameteriEXT")]
            public static void PatchParameter(OpenTK.Graphics.ES20.All pname, Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_debug_marker]</summary>
            [AutoGenerated(Category = "EXT_debug_marker", Version = "", EntryPoint = "glPopGroupMarkerEXT")]
            public static void PopGroupMarker() { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_primitive_bounding_box]</summary>
            /// <param name="minX"></param>
            /// <param name="minY"></param>
            /// <param name="minZ"></param>
            /// <param name="minW"></param>
            /// <param name="maxX"></param>
            /// <param name="maxY"></param>
            /// <param name="maxZ"></param>
            /// <param name="maxW"></param>
            [AutoGenerated(Category = "EXT_primitive_bounding_box", Version = "", EntryPoint = "glPrimitiveBoundingBoxEXT")]
            public static void PrimitiveBoundingBox(Single minX, Single minY, Single minZ, Single minW, Single maxX, Single maxY, Single maxZ, Single maxW) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="value"> 
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramParameteriEXT")]
            [CLSCompliant(false)]
            public static void ProgramParameter(Int32 program, OpenTK.Graphics.ES20.ProgramParameterName pname, Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify a parameter for a program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object whose parameter to modify.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the name of the parameter to modify.
            /// </param>
            /// <param name="value"> 
            /// Specifies the new value of the parameter specified by pname for program.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramParameteriEXT")]
            [CLSCompliant(false)]
            public static void ProgramParameter(UInt32 program, OpenTK.Graphics.ES20.ProgramParameterName pname, Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Single v0) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Single v0) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 v0) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 v0) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1uiEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, UInt32 v0) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, UInt32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref UInt32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform1uivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, UInt32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Single v0, Single v1) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Single v0, Single v1) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 v0, Int32 v1) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 v0, Int32 v1) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(Int32 program, Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2uiEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, UInt32 v0, UInt32 v1) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, UInt32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform2(UInt32 program, Int32 location, Int32 count, ref UInt32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*2] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform2uivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, UInt32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Single v0, Single v1, Single v2) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Single v0, Single v1, Single v2) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3uiEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, UInt32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref UInt32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*3] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform3uivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, UInt32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Single v0, Single v1, Single v2, Single v3) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Single v0, Single v1, Single v2, Single v3) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4iEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4ivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="v0"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v1"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v2"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            /// <param name="v3"> 
            /// For the scalar commands, specifies the new values to be used for the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4uiEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, UInt32[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref UInt32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Specify the value of a uniform variable for a specified program object
            /// </summary>
            /// <param name="program"> 
            /// Specifies the handle of the program containing the uniform variable to be modified.
            /// </param>
            /// <param name="location"> 
            /// Specifies the location of the uniform variable to be modified.
            /// </param>
            /// <param name="count"> 
            /// For the vector commands (glProgramUniform*v), specifies the number of elements that are to be modified. This should be 1 if the targeted uniform variable is not an array, and 1 or more if it is an array.  For the matrix commands (glProgramUniformMatrix*), specifies the number of matrices that are to be modified. This should be 1 if the targeted uniform variable is not an array of matrices, and 1 or more if it is an array of matrices.
            /// </param>
            /// <param name="value">[length: count*4] 
            /// For the vector and matrix commands, specifies a pointer to an array of count values that will be used to update the specified uniform variable.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniform4uivEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, UInt32* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*4]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix2x4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*9]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix3x4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects|EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*16]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects|EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x2fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="program"></param>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glProgramUniformMatrix4x3fvEXT")]
            [CLSCompliant(false)]
            public static unsafe void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_debug_marker]</summary>
            /// <param name="length"></param>
            /// <param name="marker"></param>
            [AutoGenerated(Category = "EXT_debug_marker", Version = "", EntryPoint = "glPushGroupMarkerEXT")]
            public static void PushGroupMarker(Int32 length, String marker) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
            /// </summary>
            /// <param name="id"> 
            /// Specify the name of a query object into which to record the GL time.
            /// </param>
            /// <param name="target"> 
            /// Specify the counter to query. target must be Timestamp.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glQueryCounterEXT")]
            [CLSCompliant(false)]
            public static void QueryCounter(Int32 id, OpenTK.Graphics.ES20.All target) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_disjoint_timer_query]
            /// Record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
            /// </summary>
            /// <param name="id"> 
            /// Specify the name of a query object into which to record the GL time.
            /// </param>
            /// <param name="target"> 
            /// Specify the counter to query. target must be Timestamp.
            /// </param>
            [AutoGenerated(Category = "EXT_disjoint_timer_query", Version = "", EntryPoint = "glQueryCounterEXT")]
            [CLSCompliant(false)]
            public static void QueryCounter(UInt32 id, OpenTK.Graphics.ES20.All target) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multiview_draw_buffers]</summary>
            /// <param name="src"></param>
            /// <param name="index"></param>
            [AutoGenerated(Category = "EXT_multiview_draw_buffers", Version = "", EntryPoint = "glReadBufferIndexedEXT")]
            public static void ReadBufferIndexed(OpenTK.Graphics.ES20.All src, Int32 index) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [OutAttribute] IntPtr data) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[] data)
                where T7 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[,] data)
                where T7 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            [CLSCompliant(false)]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [InAttribute, OutAttribute] T7[,,] data)
                where T7 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_robustness]</summary>
            /// <param name="x"></param>
            /// <param name="y"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="format"></param>
            /// <param name="type"></param>
            /// <param name="bufSize"></param>
            /// <param name="data">[length: bufSize]</param>
            [AutoGenerated(Category = "EXT_robustness", Version = "", EntryPoint = "glReadnPixelsEXT")]
            public static void ReadnPixels<T7>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, Int32 bufSize, [InAttribute, OutAttribute] ref T7 data)
                where T7 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_multisampled_render_to_texture]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples"> 
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [AutoGenerated(Category = "EXT_multisampled_render_to_texture", Version = "", EntryPoint = "glRenderbufferStorageMultisampleEXT")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES20.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES20.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES20.All pname, Int32[] param) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES20.All pname, ref Int32 param) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(Int32 sampler, OpenTK.Graphics.ES20.All pname, Int32* param) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, Int32[] param) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, ref Int32 param) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, Int32* param) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, UInt32[] param) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, ref UInt32 param) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="sampler"></param>
            /// <param name="pname"></param>
            /// <param name="param">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glSamplerParameterIuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void SamplerParameterI(UInt32 sampler, OpenTK.Graphics.ES20.All pname, UInt32* param) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_buffer]
            /// Attach the storage for a buffer object to the active buffer texture
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer"> 
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_buffer", Version = "", EntryPoint = "glTexBufferEXT")]
            [CLSCompliant(false)]
            public static void TexBuffer(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.All internalformat, Int32 buffer) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_buffer]
            /// Attach the storage for a buffer object to the active buffer texture
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer"> 
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_buffer", Version = "", EntryPoint = "glTexBufferEXT")]
            [CLSCompliant(false)]
            public static void TexBuffer(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.All internalformat, UInt32 buffer) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_buffer]
            /// Bind a range of a buffer's data store to a buffer texture
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer"> 
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            /// <param name="offset"> 
            /// Specifies the offset of the start of the range of the buffer's data store to attach.
            /// </param>
            /// <param name="size"> 
            /// Specifies the size of the range of the buffer's data store to attach.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_buffer", Version = "", EntryPoint = "glTexBufferRangeEXT")]
            [CLSCompliant(false)]
            public static void TexBufferRange(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All internalformat, Int32 buffer, IntPtr offset, IntPtr size) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_buffer]
            /// Bind a range of a buffer's data store to a buffer texture
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target of the operation and must be TextureBuffer.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format of the data in the store belonging to buffer.
            /// </param>
            /// <param name="buffer"> 
            /// Specifies the name of the buffer object whose storage to attach to the active buffer texture.
            /// </param>
            /// <param name="offset"> 
            /// Specifies the offset of the start of the range of the buffer's data store to attach.
            /// </param>
            /// <param name="size"> 
            /// Specifies the size of the range of the buffer's data store to attach.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_buffer", Version = "", EntryPoint = "glTexBufferRangeEXT")]
            [CLSCompliant(false)]
            public static void TexBufferRange(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All internalformat, UInt32 buffer, IntPtr offset, IntPtr size) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, ref Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIivEXT")]
            [CLSCompliant(false)]
            public static unsafe void TexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, UInt32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static void TexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, ref UInt32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_border_clamp]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "EXT_texture_border_clamp", Version = "", EntryPoint = "glTexParameterIuivEXT")]
            [CLSCompliant(false)]
            public static unsafe void TexParameterI(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, UInt32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a one-dimensional texture
            /// </summary>
            /// <param name="target"> 
            /// Specify the target of the operation. target must be either Texture1D or ProxyTexture1D.
            /// </param>
            /// <param name="levels"> 
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture, in texels.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage1DEXT")]
            public static void TexStorage1D(OpenTK.Graphics.ES20.All target, Int32 levels, OpenTK.Graphics.ES20.All internalformat, Int32 width) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
            /// </summary>
            /// <param name="target"> 
            /// Specify the target of the operation. target must be one of Texture2D, ProxyTexture2D, Texture1DArray, ProxyTexture1DArray, TextureRectangle, ProxyTextureRectangle, or ProxyTextureCubeMap.
            /// </param>
            /// <param name="levels"> 
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture, in texels.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage2DEXT")]
            public static void TexStorage2D(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 levels, OpenTK.Graphics.ES20.SizedInternalFormat internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]
            /// Simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
            /// </summary>
            /// <param name="target"> 
            /// Specify the target of the operation. target must be one of Texture3D, ProxyTexture3D, Texture2DArray, ProxyTexture2DArray, TextureCubeArray, or ProxyTextureCubeArray.
            /// </param>
            /// <param name="levels"> 
            /// Specify the number of texture levels.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture, in texels.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture, in texels.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTexStorage3DEXT")]
            public static void TexStorage3D(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 levels, OpenTK.Graphics.ES20.SizedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage1DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage1D(Int32 texture, OpenTK.Graphics.ES20.All target, Int32 levels, OpenTK.Graphics.ES20.All internalformat, Int32 width) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage1DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage1D(UInt32 texture, OpenTK.Graphics.ES20.All target, Int32 levels, OpenTK.Graphics.ES20.All internalformat, Int32 width) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage2DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage2D(Int32 texture, OpenTK.Graphics.ES20.All target, Int32 levels, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage2DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage2D(UInt32 texture, OpenTK.Graphics.ES20.All target, Int32 levels, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage3DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage3D(Int32 texture, OpenTK.Graphics.ES20.All target, Int32 levels, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_storage]</summary>
            /// <param name="texture"></param>
            /// <param name="target"></param>
            /// <param name="levels"></param>
            /// <param name="internalformat"></param>
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="depth"></param>
            [AutoGenerated(Category = "EXT_texture_storage", Version = "", EntryPoint = "glTextureStorage3DEXT")]
            [CLSCompliant(false)]
            public static void TextureStorage3D(UInt32 texture, OpenTK.Graphics.ES20.All target, Int32 levels, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_view]
            /// Initialize a texture as a data alias of another texture's data store
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture object to be initialized as a view.
            /// </param>
            /// <param name="target"> 
            /// Specifies the target to be used for the newly initialized texture.
            /// </param>
            /// <param name="origtexture"> 
            /// Specifies the name of a texture object of which to make a view.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format for the newly created view.
            /// </param>
            /// <param name="minlevel"> 
            /// Specifies lowest level of detail of the view.
            /// </param>
            /// <param name="numlevels"> 
            /// Specifies the number of levels of detail to include in the view.
            /// </param>
            /// <param name="minlayer"> 
            /// Specifies the index of the first layer to include in the view.
            /// </param>
            /// <param name="numlayers"> 
            /// Specifies the number of layers to include in the view.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_view", Version = "", EntryPoint = "glTextureViewEXT")]
            [CLSCompliant(false)]
            public static void TextureView(Int32 texture, OpenTK.Graphics.ES20.All target, Int32 origtexture, OpenTK.Graphics.ES20.All internalformat, Int32 minlevel, Int32 numlevels, Int32 minlayer, Int32 numlayers) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_texture_view]
            /// Initialize a texture as a data alias of another texture's data store
            /// </summary>
            /// <param name="texture"> 
            /// Specifies the texture object to be initialized as a view.
            /// </param>
            /// <param name="target"> 
            /// Specifies the target to be used for the newly initialized texture.
            /// </param>
            /// <param name="origtexture"> 
            /// Specifies the name of a texture object of which to make a view.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format for the newly created view.
            /// </param>
            /// <param name="minlevel"> 
            /// Specifies lowest level of detail of the view.
            /// </param>
            /// <param name="numlevels"> 
            /// Specifies the number of levels of detail to include in the view.
            /// </param>
            /// <param name="minlayer"> 
            /// Specifies the index of the first layer to include in the view.
            /// </param>
            /// <param name="numlayers"> 
            /// Specifies the number of layers to include in the view.
            /// </param>
            [AutoGenerated(Category = "EXT_texture_view", Version = "", EntryPoint = "glTextureViewEXT")]
            [CLSCompliant(false)]
            public static void TextureView(UInt32 texture, OpenTK.Graphics.ES20.All target, UInt32 origtexture, OpenTK.Graphics.ES20.All internalformat, UInt32 minlevel, UInt32 numlevels, UInt32 minlayer, UInt32 numlayers) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind stages of a program object to a program pipeline
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the program pipeline object to which to bind stages from program.
            /// </param>
            /// <param name="stages"> 
            /// Specifies a set of program stages to bind to the program pipeline object.
            /// </param>
            /// <param name="program"> 
            /// Specifies the program object containing the shader executables to use in pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glUseProgramStagesEXT")]
            [CLSCompliant(false)]
            public static void UseProgramStages(Int32 pipeline, Int32 stages, Int32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Bind stages of a program object to a program pipeline
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the program pipeline object to which to bind stages from program.
            /// </param>
            /// <param name="stages"> 
            /// Specifies a set of program stages to bind to the program pipeline object.
            /// </param>
            /// <param name="program"> 
            /// Specifies the program object containing the shader executables to use in pipeline.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glUseProgramStagesEXT")]
            [CLSCompliant(false)]
            public static void UseProgramStages(UInt32 pipeline, UInt32 stages, UInt32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="type"></param>
            /// <param name="program"></param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glUseShaderProgramEXT")]
            [CLSCompliant(false)]
            public static void UseShaderProgram(OpenTK.Graphics.ES20.All type, Int32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]</summary>
            /// <param name="type"></param>
            /// <param name="program"></param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glUseShaderProgramEXT")]
            [CLSCompliant(false)]
            public static void UseShaderProgram(OpenTK.Graphics.ES20.All type, UInt32 program) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Validate a program pipeline object against current GL state
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object to validate.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glValidateProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static void ValidateProgramPipeline(Int32 pipeline) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_separate_shader_objects]
            /// Validate a program pipeline object against current GL state
            /// </summary>
            /// <param name="pipeline"> 
            /// Specifies the name of a program pipeline object to validate.
            /// </param>
            [AutoGenerated(Category = "EXT_separate_shader_objects", Version = "", EntryPoint = "glValidateProgramPipelineEXT")]
            [CLSCompliant(false)]
            public static void ValidateProgramPipeline(UInt32 pipeline) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index"> 
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor"> 
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [AutoGenerated(Category = "EXT_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorEXT")]
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(Int32 index, Int32 divisor) { throw new NotImplementedException(); }

            /// <summary>[requires: EXT_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index"> 
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor"> 
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [AutoGenerated(Category = "EXT_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorEXT")]
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(UInt32 index, UInt32 divisor) { throw new NotImplementedException(); }

        }
    }
}
