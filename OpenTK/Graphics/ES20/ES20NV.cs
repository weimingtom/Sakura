//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2013 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

namespace OpenTK.Graphics.ES20
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573
    #pragma warning disable 626

    partial class GL
    {
        public static partial class NV
        {
            /// <summary>[requires: NV_blend_equation_advanced]</summary>
            [AutoGenerated(Category = "NV_blend_equation_advanced", Version = "", EntryPoint = "glBlendBarrierNV")]
            public static void BlendBarrier() { throw new NotImplementedException(); }

            /// <summary>[requires: NV_blend_equation_advanced]</summary>
            /// <param name="pname"></param>
            /// <param name="value"></param>
            [AutoGenerated(Category = "NV_blend_equation_advanced", Version = "", EntryPoint = "glBlendParameteriNV")]
            public static void BlendParameter(OpenTK.Graphics.ES20.All pname, Int32 value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_framebuffer_blit]
            /// Copy a block of pixels from the read framebuffer to the draw framebuffer
            /// </summary>
            /// <param name="srcX0"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY0"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcX1"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="srcY1"> 
            /// Specify the bounds of the source rectangle within the read buffer of the read framebuffer.
            /// </param>
            /// <param name="dstX0"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY0"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstX1"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="dstY1"> 
            /// Specify the bounds of the destination rectangle within the write buffer of the write framebuffer.
            /// </param>
            /// <param name="mask"> 
            /// The bitwise OR of the flags indicating which buffers are to be copied. The allowed flags are ColorBufferBit, DepthBufferBit and StencilBufferBit.
            /// </param>
            /// <param name="filter"> 
            /// Specifies the interpolation to be applied if the image is stretched. Must be Nearest or Linear.
            /// </param>
            [AutoGenerated(Category = "NV_framebuffer_blit", Version = "", EntryPoint = "glBlitFramebufferNV")]
            public static void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, OpenTK.Graphics.ES20.ClearBufferMask mask, OpenTK.Graphics.ES20.BlitFramebufferFilter filter) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_copy_buffer]
            /// Copy part of the data store of a buffer object to the data store of another buffer object
            /// </summary>
            /// <param name="readTarget"> 
            /// Specifies the target from whose data store data should be read.
            /// </param>
            /// <param name="writeTarget"> 
            /// Specifies the target to whose data store data should be written.
            /// </param>
            /// <param name="readOffset"> 
            /// Specifies the offset, in basic machine units, within the data store of readtarget from which data should be read.
            /// </param>
            /// <param name="writeOffset"> 
            /// Specifies the offset, in basic machine units, within the data store of writetarget to which data should be written.
            /// </param>
            /// <param name="size"> 
            /// Specifies the size, in basic machine units, of the data to be copied from readtarget to writetarget.
            /// </param>
            [AutoGenerated(Category = "NV_copy_buffer", Version = "", EntryPoint = "glCopyBufferSubDataNV")]
            public static void CopyBufferSubData(OpenTK.Graphics.ES20.BufferTarget readTarget, OpenTK.Graphics.ES20.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_coverage_sample]</summary>
            /// <param name="mask"></param>
            [AutoGenerated(Category = "NV_coverage_sample", Version = "", EntryPoint = "glCoverageMaskNV")]
            public static void CoverageMask(bool mask) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_coverage_sample]</summary>
            /// <param name="operation"></param>
            [AutoGenerated(Category = "NV_coverage_sample", Version = "", EntryPoint = "glCoverageOperationNV")]
            public static void CoverageOperation(OpenTK.Graphics.ES20.All operation) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static void DeleteFence(Int32 fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static void DeleteFence(UInt32 fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, Int32[] fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, ref Int32 fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static unsafe void DeleteFences(Int32 n, Int32* fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, UInt32[] fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static void DeleteFences(Int32 n, ref UInt32 fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glDeleteFencesNV")]
            [CLSCompliant(false)]
            public static unsafe void DeleteFences(Int32 n, UInt32* fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a range of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, TrianglesLinesAdjacency, LineStripAdjacency, TrianglesAdjacency, TriangleStripAdjacency and Patches are accepted.
            /// </param>
            /// <param name="first"> 
            /// Specifies the starting index in the enabled arrays.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of indices to be rendered.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawArraysInstancedNV")]
            public static void DrawArraysInstanced(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 first, Int32 count, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n] 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [AutoGenerated(Category = "NV_draw_buffers", Version = "", EntryPoint = "glDrawBuffersNV")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, OpenTK.Graphics.ES20.DrawBufferMode[] bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n] 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [AutoGenerated(Category = "NV_draw_buffers", Version = "", EntryPoint = "glDrawBuffersNV")]
            [CLSCompliant(false)]
            public static void DrawBuffers(Int32 n, ref OpenTK.Graphics.ES20.DrawBufferMode bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_buffers]
            /// Specifies a list of color buffers to be drawn into
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of buffers in bufs.
            /// </param>
            /// <param name="bufs">[length: n] 
            /// Points to an array of symbolic constants specifying the buffers into which fragment colors or data values will be written.
            /// </param>
            [AutoGenerated(Category = "NV_draw_buffers", Version = "", EntryPoint = "glDrawBuffersNV")]
            [CLSCompliant(false)]
            public static unsafe void DrawBuffers(Int32 n, OpenTK.Graphics.ES20.DrawBufferMode* bufs) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            public static void DrawElementsInstanced(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, IntPtr indices, Int32 primcount) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            [CLSCompliant(false)]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: NV_draw_instanced]
            /// Draw multiple instances of a set of elements
            /// </summary>
            /// <param name="mode"> 
            /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, LineStripAdjacency, LinesAdjacency, TriangleStrip, TriangleFan, Triangles, TriangleStripAdjacency, TrianglesAdjacency and Patches are accepted.
            /// </param>
            /// <param name="count"> 
            /// Specifies the number of elements to be rendered.
            /// </param>
            /// <param name="type"> 
            /// Specifies the type of the values in indices. Must be one of UnsignedByte, UnsignedShort, or UnsignedInt.
            /// </param>
            /// <param name="indices">[length: count,type] 
            /// Specifies a pointer to the location where the indices are stored.
            /// </param>
            /// <param name="primcount"> 
            /// Specifies the number of instances of the specified range of indices to be rendered.
            /// </param>
            [AutoGenerated(Category = "NV_draw_instanced", Version = "", EntryPoint = "glDrawElementsInstancedNV")]
            public static void DrawElementsInstanced<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices, Int32 primcount)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glFinishFenceNV")]
            [CLSCompliant(false)]
            public static void FinishFence(Int32 fence) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glFinishFenceNV")]
            [CLSCompliant(false)]
            public static void FinishFence(UInt32 fence) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static Int32 GenFence() { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute] Int32[] fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute] out Int32 fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static unsafe void GenFences(Int32 n, [OutAttribute] Int32* fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute] UInt32[] fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static void GenFences(Int32 n, [OutAttribute] out UInt32 fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="n"></param>
            /// <param name="fences">[length: n]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGenFencesNV")]
            [CLSCompliant(false)]
            public static unsafe void GenFences(Int32 n, [OutAttribute] UInt32* fences) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static void GetFence(Int32 fence, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static void GetFence(Int32 fence, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static unsafe void GetFence(Int32 fence, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static void GetFence(UInt32 fence, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static void GetFence(UInt32 fence, OpenTK.Graphics.ES20.All pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="pname"></param>
            /// <param name="@params">[length: pname]</param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glGetFenceivNV")]
            [CLSCompliant(false)]
            public static unsafe void GetFence(UInt32 fence, OpenTK.Graphics.ES20.All pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glIsFenceNV")]
            [CLSCompliant(false)]
            public static bool IsFence(Int32 fence) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glIsFenceNV")]
            [CLSCompliant(false)]
            public static bool IsFence(UInt32 fence) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_read_buffer]
            /// Select a color buffer source for pixels
            /// </summary>
            /// <param name="mode"> 
            /// Specifies a color buffer. Accepted values are FrontLeft, FrontRight, BackLeft, BackRight, Front, Back, Left, Right, and the constants ColorAttachmenti.
            /// </param>
            [AutoGenerated(Category = "NV_read_buffer", Version = "", EntryPoint = "glReadBufferNV")]
            public static void ReadBuffer(OpenTK.Graphics.ES20.All mode) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples"> 
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [AutoGenerated(Category = "NV_framebuffer_multisample", Version = "", EntryPoint = "glRenderbufferStorageMultisampleNV")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES20.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES20.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="condition"></param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glSetFenceNV")]
            [CLSCompliant(false)]
            public static void SetFence(Int32 fence, OpenTK.Graphics.ES20.All condition) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            /// <param name="condition"></param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glSetFenceNV")]
            [CLSCompliant(false)]
            public static void SetFence(UInt32 fence, OpenTK.Graphics.ES20.All condition) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glTestFenceNV")]
            [CLSCompliant(false)]
            public static bool TestFence(Int32 fence) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_fence]</summary>
            /// <param name="fence"></param>
            [AutoGenerated(Category = "NV_fence", Version = "", EntryPoint = "glTestFenceNV")]
            [CLSCompliant(false)]
            public static bool TestFence(UInt32 fence) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x3fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x3fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x3fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x4fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x4fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix2x4fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x2fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x2fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*6]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x2fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x4fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x4fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix3x4fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x2fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x2fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*8]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x2fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x3fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x3fvNV")]
            [CLSCompliant(false)]
            public static void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_non_square_matrices]</summary>
            /// <param name="location"></param>
            /// <param name="count"></param>
            /// <param name="transpose"></param>
            /// <param name="value">[length: count*12]</param>
            [AutoGenerated(Category = "NV_non_square_matrices", Version = "", EntryPoint = "glUniformMatrix4x3fvNV")]
            [CLSCompliant(false)]
            public static unsafe void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index"> 
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor"> 
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [AutoGenerated(Category = "NV_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorNV")]
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(Int32 index, Int32 divisor) { throw new NotImplementedException(); }

            /// <summary>[requires: NV_instanced_arrays]
            /// Modify the rate at which generic vertex attributes advance during instanced rendering
            /// </summary>
            /// <param name="index"> 
            /// Specify the index of the generic vertex attribute.
            /// </param>
            /// <param name="divisor"> 
            /// Specify the number of instances that will pass between updates of the generic attribute at slot index.
            /// </param>
            [AutoGenerated(Category = "NV_instanced_arrays", Version = "", EntryPoint = "glVertexAttribDivisorNV")]
            [CLSCompliant(false)]
            public static void VertexAttribDivisor(UInt32 index, UInt32 divisor) { throw new NotImplementedException(); }

        }
    	
    }
}
