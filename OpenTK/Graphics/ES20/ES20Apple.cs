//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2013 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

namespace OpenTK.Graphics.ES20
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573
    #pragma warning disable 626

    partial class GL
    {
         public static partial class Apple
        {
            /// <summary>[requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync"> 
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags"> 
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout"> 
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glClientWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES20.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES20.ClientWaitSyncFlags flags, Int64 timeout) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Block and wait for a sync object to become signaled
            /// </summary>
            /// <param name="sync"> 
            /// The sync object whose status to wait on.
            /// </param>
            /// <param name="flags"> 
            /// A bitfield controlling the command flushing behavior. flags may be SyncFlushCommandsBit.
            /// </param>
            /// <param name="timeout"> 
            /// The timeout, specified in nanoseconds, for which the implementation should wait for sync to become signaled.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glClientWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static OpenTK.Graphics.ES20.WaitSyncStatus ClientWaitSync(IntPtr sync, OpenTK.Graphics.ES20.ClientWaitSyncFlags flags, UInt64 timeout) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_copy_texture_levels]</summary>
            /// <param name="destinationTexture"></param>
            /// <param name="sourceTexture"></param>
            /// <param name="sourceBaseLevel"></param>
            /// <param name="sourceLevelCount"></param>
            [AutoGenerated(Category = "APPLE_copy_texture_levels", Version = "", EntryPoint = "glCopyTextureLevelsAPPLE")]
            [CLSCompliant(false)]
            public static void CopyTextureLevel(Int32 destinationTexture, Int32 sourceTexture, Int32 sourceBaseLevel, Int32 sourceLevelCount) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_copy_texture_levels]</summary>
            /// <param name="destinationTexture"></param>
            /// <param name="sourceTexture"></param>
            /// <param name="sourceBaseLevel"></param>
            /// <param name="sourceLevelCount"></param>
            [AutoGenerated(Category = "APPLE_copy_texture_levels", Version = "", EntryPoint = "glCopyTextureLevelsAPPLE")]
            [CLSCompliant(false)]
            public static void CopyTextureLevel(UInt32 destinationTexture, UInt32 sourceTexture, Int32 sourceBaseLevel, Int32 sourceLevelCount) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Delete a sync object
            /// </summary>
            /// <param name="sync"> 
            /// The sync object to be deleted.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glDeleteSyncAPPLE")]
            public static void DeleteSync(IntPtr sync) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Create a new sync object and insert it into the GL command stream
            /// </summary>
            /// <param name="condition"> 
            /// Specifies the condition that must be met to set the sync object's state to signaled. condition must be SyncGpuCommandsComplete.
            /// </param>
            /// <param name="flags"> 
            /// Specifies a bitwise combination of flags controlling the behavior of the sync object. No flags are presently defined for this operation and flags must be zero.flags is a placeholder for anticipated future extensions of fence sync object capabilities.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glFenceSyncAPPLE")]
            public static IntPtr FenceSync(OpenTK.Graphics.ES20.SyncCondition condition, OpenTK.Graphics.ES20.WaitSyncFlags flags) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static Int64 GetInteger64(OpenTK.Graphics.ES20.GetPName pname) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static void GetInteger64(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] Int64[] @params) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static void GetInteger64(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] out Int64 @params) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]</summary>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetInteger64vAPPLE")]
            [CLSCompliant(false)]
            public static unsafe void GetInteger64(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] Int64* @params) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length"> 
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize] 
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            [CLSCompliant(false)]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES20.SyncParameterName pname, Int32 bufSize, [OutAttribute] Int32[] length, [OutAttribute] Int32[] values) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length"> 
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize] 
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            [CLSCompliant(false)]
            public static void GetSync(IntPtr sync, OpenTK.Graphics.ES20.SyncParameterName pname, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 values) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Query the properties of a sync object
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose properties to query.
            /// </param>
            /// <param name="pname"> 
            /// Specifies the parameter whose value to retrieve from the sync object specified in sync.
            /// </param>
            /// <param name="bufSize"> 
            /// Specifies the size of the buffer whose address is given in values.
            /// </param>
            /// <param name="length"> 
            /// Specifies the address of an variable to receive the number of integers placed in values.
            /// </param>
            /// <param name="values">[length: bufSize] 
            /// Specifies the address of an array to receive the values of the queried parameter.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glGetSyncivAPPLE")]
            [CLSCompliant(false)]
            public static unsafe void GetSync(IntPtr sync, OpenTK.Graphics.ES20.SyncParameterName pname, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* values) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Determine if a name corresponds to a sync object
            /// </summary>
            /// <param name="sync"> 
            /// Specifies a value that may be the name of a sync object.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glIsSyncAPPLE")]
            public static bool IsSync(IntPtr sync) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_framebuffer_multisample]
            /// Establish data storage, format, dimensions and sample count of a renderbuffer object's image
            /// </summary>
            /// <param name="target"> 
            /// Specifies a binding to which the target of the allocation and must be Renderbuffer.
            /// </param>
            /// <param name="samples"> 
            /// Specifies the number of samples to be used for the renderbuffer object's storage.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the internal format to use for the renderbuffer object's image.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the renderbuffer, in pixels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the renderbuffer, in pixels.
            /// </param>
            [AutoGenerated(Category = "APPLE_framebuffer_multisample", Version = "", EntryPoint = "glRenderbufferStorageMultisampleAPPLE")]
            public static void RenderbufferStorageMultisample(OpenTK.Graphics.ES20.RenderbufferTarget target, Int32 samples, OpenTK.Graphics.ES20.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_framebuffer_multisample]</summary>
            [AutoGenerated(Category = "APPLE_framebuffer_multisample", Version = "", EntryPoint = "glResolveMultisampleFramebufferAPPLE")]
            public static void ResolveMultisampleFramebuffer() { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose status to wait on.
            /// </param>
            /// <param name="flags"> 
            /// A bitfield controlling the command flushing behavior. flags may be zero.
            /// </param>
            /// <param name="timeout"> 
            /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES20.WaitSyncFlags flags, Int64 timeout) { throw new NotImplementedException(); }

            /// <summary>[requires: APPLE_sync]
            /// Instruct the GL server to block until the specified sync object becomes signaled
            /// </summary>
            /// <param name="sync"> 
            /// Specifies the sync object whose status to wait on.
            /// </param>
            /// <param name="flags"> 
            /// A bitfield controlling the command flushing behavior. flags may be zero.
            /// </param>
            /// <param name="timeout"> 
            /// Specifies the timeout that the server should wait before continuing. timeout must be TimeoutIgnored.
            /// </param>
            [AutoGenerated(Category = "APPLE_sync", Version = "", EntryPoint = "glWaitSyncAPPLE")]
            [CLSCompliant(false)]
            public static void WaitSync(IntPtr sync, OpenTK.Graphics.ES20.WaitSyncFlags flags, UInt64 timeout) { throw new NotImplementedException(); }

        }   
    }
}