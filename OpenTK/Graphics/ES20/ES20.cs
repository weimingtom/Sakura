//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2013 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

//see https://github.com/smacdo/SDLSharpGame/tree/master/thirdparty/SDL2-CS/src/MiniTK/Graphics/ES20
namespace OpenTK.Graphics.ES20
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573
    #pragma warning disable 626

    partial class GL
    {  
        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Select active texture unit
        /// </summary>
        /// <param name="texture"> 
        /// Specifies which texture unit to make active. The number of texture units is implementation dependent, but must be at least 8. texture must be one of Texture, where i ranges from 0 to (MaxCombinedTextureImageUnits - 1). The initial value is Texture0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glActiveTexture")]
        public static void ActiveTexture(OpenTK.Graphics.ES20.TextureUnit texture) 
        { 
        	glActiveTexture((int)texture);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a shader object to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to which a shader object will be attached.
        /// </param>
        /// <param name="shader"> 
        /// Specifies the shader object that is to be attached.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
        [CLSCompliant(false)]
        public static void AttachShader(Int32 program, Int32 shader) { glAttachShader((uint)program, (uint)shader); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a shader object to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to which a shader object will be attached.
        /// </param>
        /// <param name="shader"> 
        /// Specifies the shader object that is to be attached.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glAttachShader")]
        [CLSCompliant(false)]
        public static void AttachShader(UInt32 program, UInt32 shader) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Associate a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the handle of the program object in which the association is to be made.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </param>
        /// <param name="name"> 
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        [CLSCompliant(false)]
        public static void BindAttribLocation(Int32 program, Int32 index, String name) { glBindAttribLocation((uint)program, (uint)index, MarshalStringToPtr(name)); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Associate a generic vertex attribute index with a named attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the handle of the program object in which the association is to be made.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be bound.
        /// </param>
        /// <param name="name"> 
        /// Specifies a null terminated string containing the name of the vertex shader attribute variable to which index is to be bound.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindAttribLocation")]
        [CLSCompliant(false)]
        public static void BindAttribLocation(UInt32 program, UInt32 index, String name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="buffer"> 
        /// Specifies the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindBuffer")]
        [CLSCompliant(false)]
        public static void BindBuffer(OpenTK.Graphics.ES20.BufferTarget target, Int32 buffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the buffer object is bound. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="buffer"> 
        /// Specifies the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindBuffer")]
        [CLSCompliant(false)]
        public static void BindBuffer(OpenTK.Graphics.ES20.BufferTarget target, UInt32 buffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the framebuffer object is bound. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="framebuffer"> 
        /// Specifies the name of a framebuffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindFramebuffer")]
        [CLSCompliant(false)]
        public static void BindFramebuffer(OpenTK.Graphics.ES20.FramebufferTarget target, Int32 framebuffer) 
        { 
        	glBindFramebuffer((int)target, (uint)framebuffer);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the framebuffer object is bound. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="framebuffer"> 
        /// Specifies the name of a framebuffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindFramebuffer")]
        [CLSCompliant(false)]
        public static void BindFramebuffer(OpenTK.Graphics.ES20.FramebufferTarget target, UInt32 framebuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named renderbuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the renderbuffer object is bound. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer"> 
        /// Specifies the name of a renderbuffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindRenderbuffer")]
        [CLSCompliant(false)]
        public static void BindRenderbuffer(OpenTK.Graphics.ES20.RenderbufferTarget target, Int32 renderbuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named renderbuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target to which the renderbuffer object is bound. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer"> 
        /// Specifies the name of a renderbuffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindRenderbuffer")]
        [CLSCompliant(false)]
        public static void BindRenderbuffer(OpenTK.Graphics.ES20.RenderbufferTarget target, UInt32 renderbuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the name of a texture.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindTexture")]
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES20.TextureTarget target, Int32 texture) 
        { 
        	glBindTexture((int)target, (uint)texture);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Bind a named texture to a texturing target
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target of the active texture unit to which the texture is bound. Must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the name of a texture.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBindTexture")]
        [CLSCompliant(false)]
        public static void BindTexture(OpenTK.Graphics.ES20.TextureTarget target, UInt32 texture) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set the blend color
        /// </summary>
        /// <param name="red"> 
        /// specify the components of BlendColor
        /// </param>
        /// <param name="green"> 
        /// specify the components of BlendColor
        /// </param>
        /// <param name="blue"> 
        /// specify the components of BlendColor
        /// </param>
        /// <param name="alpha"> 
        /// specify the components of BlendColor
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendColor")]
        public static void BlendColor(Single red, Single green, Single blue, Single alpha) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the equation used for both the RGB blend equation and the Alpha blend equation
        /// </summary>
        /// <param name="mode"> 
        /// specifies how source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquation")]
        public static void BlendEquation(OpenTK.Graphics.ES20.BlendEquationMode mode) 
        { 
        	glBlendEquation((int)mode);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set the RGB blend equation and the alpha blend equation separately
        /// </summary>
        /// <param name="modeRGB"> 
        /// specifies the RGB blend equation, how the red, green, and blue components of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
        /// </param>
        /// <param name="modeAlpha"> 
        /// specifies the alpha blend equation, how the alpha component of the source and destination colors are combined. It must be FuncAdd, FuncSubtract, or FuncReverseSubtract.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendEquationSeparate")]
        public static void BlendEquationSeparate(OpenTK.Graphics.ES20.BlendEquationMode modeRGB, OpenTK.Graphics.ES20.BlendEquationMode modeAlpha) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify pixel arithmetic
        /// </summary>
        /// <param name="sfactor"> 
        /// Specifies how the red, green, blue, and alpha source blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
        /// </param>
        /// <param name="dfactor"> 
        /// Specifies how the red, green, blue, and alpha destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendFunc")]
        public static void BlendFunc(OpenTK.Graphics.ES20.BlendingFactorSrc sfactor, OpenTK.Graphics.ES20.BlendingFactorDest dfactor) 
        { 
        	glBlendFunc((int)sfactor, (int)dfactor);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify pixel arithmetic for RGB and alpha components separately
        /// </summary>
        /// <param name="sfactorRGB"> 
        /// Specifies how the red, green, and blue blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha, ConstantColor, OneMinusConstantColor, ConstantAlpha, OneMinusConstantAlpha, and SrcAlphaSaturate. The initial value is One.
        /// </param>
        /// <param name="dfactorRGB"> 
        /// Specifies how the red, green, and blue destination blending factors are computed. The following symbolic constants are accepted: Zero, One, SrcColor, OneMinusSrcColor, DstColor, OneMinusDstColor, SrcAlpha, OneMinusSrcAlpha, DstAlpha, OneMinusDstAlpha. ConstantColor, OneMinusConstantColor, ConstantAlpha, and OneMinusConstantAlpha. The initial value is Zero.
        /// </param>
        /// <param name="sfactorAlpha"> 
        /// Specified how the alpha source blending factor is computed.  The same symbolic constants are accepted as for srcRGB. The initial value is One.
        /// </param>
        /// <param name="dfactorAlpha"> 
        /// Specified how the alpha destination blending factor is computed.  The same symbolic constants are accepted as for dstRGB. The initial value is Zero.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBlendFuncSeparate")]
        public static void BlendFuncSeparate(OpenTK.Graphics.ES20.BlendingFactorSrc sfactorRGB, OpenTK.Graphics.ES20.BlendingFactorDest dfactorRGB, OpenTK.Graphics.ES20.BlendingFactorSrc sfactorAlpha, OpenTK.Graphics.ES20.BlendingFactorDest dfactorAlpha) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, IntPtr data, OpenTK.Graphics.ES20.BufferUsageHint usage) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[] data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,] data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        [CLSCompliant(false)]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] T2[,,] data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the buffer object's new data store.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to data that will be copied into the data store for initialization, or Null if no data is to be copied.
        /// </param>
        /// <param name="usage"> 
        /// Specifies the expected usage pattern of the data store. The symbolic constant must be StreamDraw, StaticDraw, or DynamicDraw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferData")]
        public static void BufferData<T2>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr size, [InAttribute, OutAttribute] ref T2 data, OpenTK.Graphics.ES20.BufferUsageHint usage)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[] data)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,] data)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        [CLSCompliant(false)]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] T3[,,] data)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Update a subset of a buffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="offset"> 
        /// Specifies the offset into the buffer object's data store where data replacement will begin, measured in bytes.
        /// </param>
        /// <param name="size"> 
        /// Specifies the size in bytes of the data store region being replaced.
        /// </param>
        /// <param name="data">[length: size] 
        /// Specifies a pointer to the new data that will be copied into the data store.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glBufferSubData")]
        public static void BufferSubData<T3>(OpenTK.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, [InAttribute, OutAttribute] ref T3 data)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the framebuffer completeness status of a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCheckFramebufferStatus")]
        public static OpenTK.Graphics.ES20.FramebufferErrorCode CheckFramebufferStatus(OpenTK.Graphics.ES20.FramebufferTarget target) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Clear buffers to preset values
        /// </summary>
        /// <param name="mask"> 
        /// Bitwise OR of masks that indicate the buffers to be cleared. The three masks are ColorBufferBit, DepthBufferBit, and StencilBufferBit.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClear")]
        public static void Clear(OpenTK.Graphics.ES20.ClearBufferMask mask) 
        { 
        	glClear((int)mask); 
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify clear values for the color buffers
        /// </summary>
        /// <param name="red"> 
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="green"> 
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="blue"> 
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        /// <param name="alpha"> 
        /// Specify the red, green, blue, and alpha values used when the color buffers are cleared. The initial values are all 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClearColor")]
        public static void ClearColor(Single red, Single green, Single blue, Single alpha) { 
        	glClearColor(red, green, blue, alpha); 
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the clear value for the depth buffer
        /// </summary>
        /// <param name="d"> 
        /// Specifies the depth value used when the depth buffer is cleared. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClearDepthf")]
        public static void ClearDepth(Single d) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the clear value for the stencil buffer
        /// </summary>
        /// <param name="s"> 
        /// Specifies the index used when the stencil buffer is cleared. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glClearStencil")]
        public static void ClearStencil(Int32 s) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable and disable writing of frame buffer color components
        /// </summary>
        /// <param name="red"> 
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="green"> 
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="blue"> 
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        /// <param name="alpha"> 
        /// Specify whether red, green, blue, and alpha can or cannot be written into the frame buffer. The initial values are all True, indicating that the color components can be written.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glColorMask")]
        public static void ColorMask(bool red, bool green, bool blue, bool alpha) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Compile a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be compiled.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
        [CLSCompliant(false)]
        public static void CompileShader(Int32 shader) { glCompileShader((uint)shader); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Compile a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be compiled.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompileShader")]
        [CLSCompliant(false)]
        public static void CompileShader(UInt32 shader) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[] data)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,] data)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T7[,,] data)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexImage2D")]
        public static void CompressedTexImage2D<T7>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T7 data)
            where T7 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, Int32 imageSize, IntPtr data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        [CLSCompliant(false)]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage in a compressed format
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the compressed image data stored at address data.
        /// </param>
        /// <param name="imageSize"> 
        /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
        /// </param>
        /// <param name="data">[length: imageSize] 
        /// Specifies a pointer to the compressed image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCompressedTexSubImage2D")]
        public static void CompressedTexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Copy pixels into a 2D texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, or Rgba.
        /// </param>
        /// <param name="x"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image. All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCopyTexImage2D")]
        public static void CopyTexImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.TextureCopyComponentCount internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Copy a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="x"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCopyTexSubImage2D")]
        public static void CopyTexSubImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create a program object
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCreateProgram")]
        public static Int32 CreateProgram() { return glCreateProgram(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create a shader object
        /// </summary>
        /// <param name="type"> 
        /// Specifies the type of shader to be created. Must be either VertexShader or FragmentShader.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCreateShader")]
        public static Int32 CreateShader(OpenTK.Graphics.ES20.ShaderType type) { return glCreateShader((int)type); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify whether front- or back-facing polygons can be culled
        /// </summary>
        /// <param name="mode"> 
        /// Specifies whether front- or back-facing polygons are candidates for culling. Symbolic constants Front, Back, and FrontAndBack are accepted. The initial value is Back.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glCullFace")]
        public static void CullFace(OpenTK.Graphics.ES20.CullFaceMode mode) 
        { 
        	glCullFace((int)mode);
        }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback"> 
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam"> 
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback(DebugProc callback, IntPtr userParam) { throw new NotImplementedException(); }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback"> 
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam"> 
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        [CLSCompliant(false)]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[] userParam)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback"> 
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam"> 
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        [CLSCompliant(false)]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[,] userParam)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback"> 
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam"> 
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        [CLSCompliant(false)]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] T1[,,] userParam)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Specify a callback to receive debugging messages from the GL
        /// </summary>
        /// <param name="callback"> 
        /// The address of a callback function that will be called when a debug message is generated.
        /// </param>
        /// <param name="userParam"> 
        /// A user supplied pointer that will be passed on each invocation of callback.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageCallback")]
        public static void DebugMessageCallback<T1>(DebugProc callback, [InAttribute, OutAttribute] ref T1 userParam)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, Int32[] ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, ref Int32 ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, Int32* ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, UInt32[] ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, ref UInt32 ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Control the reporting of debug messages in a debug context
        /// </summary>
        /// <param name="source"> 
        /// The source of debug messages to enable or disable.
        /// </param>
        /// <param name="type"> 
        /// The type of debug messages to enable or disable.
        /// </param>
        /// <param name="severity"> 
        /// The severity of debug messages to enable or disable.
        /// </param>
        /// <param name="count"> 
        /// The length of the array ids.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
        /// </param>
        /// <param name="enabled"> 
        /// A Boolean flag determining whether the selected messages should be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageControl")]
        [CLSCompliant(false)]
        public static unsafe void DebugMessageControl(OpenTK.Graphics.ES20.DebugSourceControl source, OpenTK.Graphics.ES20.DebugTypeControl type, OpenTK.Graphics.ES20.DebugSeverityControl severity, Int32 count, UInt32* ids, bool enabled) { throw new NotImplementedException(); }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source"> 
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type"> 
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id"> 
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity"> 
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length"> 
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">[length: buf,length] 
        /// The address of a character array containing the message to insert.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsert")]
        [CLSCompliant(false)]
        public static void DebugMessageInsert(OpenTK.Graphics.ES20.DebugSourceExternal source, OpenTK.Graphics.ES20.DebugType type, Int32 id, OpenTK.Graphics.ES20.DebugSeverity severity, Int32 length, String buf) { throw new NotImplementedException(); }

        /// <summary>
        /// Inject an application-supplied message into the debug message queue
        /// </summary>
        /// <param name="source"> 
        /// The source of the debug message to insert.
        /// </param>
        /// <param name="type"> 
        /// The type of the debug message insert.
        /// </param>
        /// <param name="id"> 
        /// The user-supplied identifier of the message to insert.
        /// </param>
        /// <param name="severity"> 
        /// The severity of the debug messages to insert.
        /// </param>
        /// <param name="length"> 
        /// The length string contained in the character array whose address is given by message.
        /// </param>
        /// <param name="buf">[length: buf,length] 
        /// The address of a character array containing the message to insert.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glDebugMessageInsert")]
        [CLSCompliant(false)]
        public static void DebugMessageInsert(OpenTK.Graphics.ES20.DebugSourceExternal source, OpenTK.Graphics.ES20.DebugType type, UInt32 id, OpenTK.Graphics.ES20.DebugSeverity severity, Int32 length, String buf) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffer(Int32 buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffer(UInt32 buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, Int32[] buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, ref Int32 buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteBuffers(Int32 n, Int32* buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, UInt32[] buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static void DeleteBuffers(Int32 n, ref UInt32 buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named buffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer objects to be deleted.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array of buffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteBuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteBuffers(Int32 n, UInt32* buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffer(Int32 framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffer(UInt32 framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, Int32[] framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, ref Int32 framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteFramebuffers(Int32 n, Int32* framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, UInt32[] framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static void DeleteFramebuffers(Int32 n, ref UInt32 framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named framebuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer objects to be deleted.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array of framebuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteFramebuffers(Int32 n, UInt32* framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteProgram")]
        [CLSCompliant(false)]
        public static void DeleteProgram(Int32 program) { glDeleteProgram((uint)program); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteProgram")]
        [CLSCompliant(false)]
        public static void DeleteProgram(UInt32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffer(Int32 renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffer(UInt32 renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, Int32[] renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, ref Int32 renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteRenderbuffers(Int32 n, Int32* renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, UInt32[] renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static void DeleteRenderbuffers(Int32 n, ref UInt32 renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named renderbuffer objects
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer objects to be deleted.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array of renderbuffer objects to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void DeleteRenderbuffers(Int32 n, UInt32* renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteShader")]
        [CLSCompliant(false)]
        public static void DeleteShader(Int32 shader) { glDeleteShader((uint)shader); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteShader")]
        [CLSCompliant(false)]
        public static void DeleteShader(UInt32 shader) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public unsafe static void DeleteTexture(Int32 textures) 
        { 
        	int[] textures_ = new int[] { textures };
         	fixed (int* ptr = textures_)
			{
				glDeleteTextures(1, (uint*)ptr);
			}
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTexture(UInt32 textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public unsafe static void DeleteTextures(Int32 n, Int32[] textures) 
        { 
        	fixed (int* ptr = textures)
			{
				glDeleteTextures(n, (uint*)ptr);
			}
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, ref Int32 textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static unsafe void DeleteTextures(Int32 n, Int32* textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, UInt32[] textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static void DeleteTextures(Int32 n, ref UInt32 textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Delete named textures
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of textures to be deleted.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array of textures to be deleted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDeleteTextures")]
        [CLSCompliant(false)]
        public static unsafe void DeleteTextures(Int32 n, UInt32* textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value used for depth buffer comparisons
        /// </summary>
        /// <param name="func"> 
        /// Specifies the depth comparison function. Symbolic constants Never, Less, Equal, Lequal, Greater, Notequal, Gequal, and Always are accepted. The initial value is Less.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDepthFunc")]
        public static void DepthFunc(OpenTK.Graphics.ES20.DepthFunction func) 
        { 
        	glDepthFunc((int)func);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable writing into the depth buffer
        /// </summary>
        /// <param name="flag"> 
        /// Specifies whether the depth buffer is enabled for writing. If flag is False, depth buffer writing is disabled. Otherwise, it is enabled. Initially, depth buffer writing is enabled.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDepthMask")]
        public static void DepthMask(bool flag) 
        { 
        	glDepthMask(flag);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify mapping of depth values from normalized device coordinates to window coordinates
        /// </summary>
        /// <param name="n"> 
        /// Specifies the mapping of the near clipping plane to window coordinates. The initial value is 0.
        /// </param>
        /// <param name="f"> 
        /// Specifies the mapping of the far clipping plane to window coordinates. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDepthRangef")]
        public static void DepthRange(Single n, Single f) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Detach a shader object from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object from which to detach the shader object.
        /// </param>
        /// <param name="shader"> 
        /// Specifies the shader object to be detached.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDetachShader")]
        [CLSCompliant(false)]
        public static void DetachShader(Int32 program, Int32 shader) { glDetachShader((uint)program, (uint)shader); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Detach a shader object from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object from which to detach the shader object.
        /// </param>
        /// <param name="shader"> 
        /// Specifies the shader object to be detached.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDetachShader")]
        [CLSCompliant(false)]
        public static void DetachShader(UInt32 program, UInt32 shader) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="cap"></param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDisable")]
        public static void Disable(OpenTK.Graphics.ES20.EnableCap cap) 
        { 
        	glDisable((int)cap);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="index"></param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        [CLSCompliant(false)]
        public static void DisableVertexAttribArray(Int32 index) 
        { 
        	glDisableVertexAttribArray((uint)index);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="index"></param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDisableVertexAttribArray")]
        [CLSCompliant(false)]
        public static void DisableVertexAttribArray(UInt32 index) 
        { 
        	glDisableVertexAttribArray(index);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="first"> 
        /// Specifies the starting index in the enabled arrays.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of indices to be rendered.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawArrays")]
        public static void DrawArrays(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 first, Int32 count) { 
			glDrawArrays((int)mode, first, count);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        public static void DrawElements(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, IntPtr indices) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        [CLSCompliant(false)]
        public unsafe static void DrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[] indices)
            where T3 : struct
        { 
			GCHandle gCHandle = GCHandle.Alloc(indices, GCHandleType.Pinned);
			try
			{
				glDrawElements((int)mode, count, (int)type, gCHandle.AddrOfPinnedObject());
			}
			finally
			{
				gCHandle.Free();
			}
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,] indices)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        [CLSCompliant(false)]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] T3[,,] indices)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Render primitives from array data
        /// </summary>
        /// <param name="mode"> 
        /// Specifies what kind of primitives to render. Symbolic constants Points, LineStrip, LineLoop, Lines, TriangleStrip, TriangleFan, and Triangles are accepted.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements to be rendered.
        /// </param>
        /// <param name="type"> 
        /// Specifies the type of the values in indices. Must be UnsignedByte or UnsignedShort.
        /// </param>
        /// <param name="indices">[length: count,type] 
        /// Specifies a pointer to the location where the indices are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glDrawElements")]
        public static void DrawElements<T3>(OpenTK.Graphics.ES20.PrimitiveType mode, Int32 count, OpenTK.Graphics.ES20.DrawElementsType type, [InAttribute, OutAttribute] ref T3 indices)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable server-side GL capabilities
        /// </summary>
        /// <param name="cap"> 
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glEnable")]
        public static void Enable(OpenTK.Graphics.ES20.EnableCap cap) { glEnable((int)cap); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        [CLSCompliant(false)]
        public static void EnableVertexAttribArray(Int32 index) { glEnableVertexAttribArray((uint)index); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Enable or disable a generic vertex attribute array
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be enabled or disabled.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glEnableVertexAttribArray")]
        [CLSCompliant(false)]
        public static void EnableVertexAttribArray(UInt32 index) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Block until all GL execution is complete
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFinish")]
        public static void Finish() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Force execution of GL commands in finite time
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFlush")]
        public static void Flush() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a renderbuffer object to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="renderbuffertarget"> 
        /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer"> 
        /// Specifies the renderbuffer object that is to be attached.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferRenderbuffer")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.RenderbufferTarget renderbuffertarget, Int32 renderbuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a renderbuffer object to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which renderbuffer should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="renderbuffertarget"> 
        /// Specifies the renderbuffer target. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="renderbuffer"> 
        /// Specifies the renderbuffer object that is to be attached.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferRenderbuffer")]
        [CLSCompliant(false)]
        public static void FramebufferRenderbuffer(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a texture image to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="textarget"> 
        /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the texture object whose image is to be attached.
        /// </param>
        /// <param name="level"> 
        /// Specifies the mipmap level of the texture image to be attached, which must be 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferTexture2D")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.TextureTarget2d textarget, Int32 texture, Int32 level) 
        { 
        	glFramebufferTexture2D((int)target, (int)attachment, (int)textarget, (uint)texture, level);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Attach a texture image to a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the framebuffer target. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the attachment point to which an image from texture should be attached. Must be one of the following symbolic constants: ColorAttachment0, DepthAttachment, or StencilAttachment.
        /// </param>
        /// <param name="textarget"> 
        /// Specifies the texture target. Must be one of the following symbolic constants: Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="texture"> 
        /// Specifies the texture object whose image is to be attached.
        /// </param>
        /// <param name="level"> 
        /// Specifies the mipmap level of the texture image to be attached, which must be 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFramebufferTexture2D")]
        [CLSCompliant(false)]
        public static void FramebufferTexture2D(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.TextureTarget2d textarget, UInt32 texture, Int32 level) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define front- and back-facing polygons
        /// </summary>
        /// <param name="mode"> 
        /// Specifies the orientation of front-facing polygons. Cw and Ccw are accepted. The initial value is Ccw.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glFrontFace")]
        public static void FrontFace(OpenTK.Graphics.ES20.FrontFaceDirection mode) 
        { 
        	glFrontFace((int)mode);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static Int32 GenBuffer() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute] Int32[] buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute] out Int32 buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenBuffers(Int32 n, [OutAttribute] Int32* buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute] UInt32[] buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static void GenBuffers(Int32 n, [OutAttribute] out UInt32 buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate buffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of buffer object names to be generated.
        /// </param>
        /// <param name="buffers">[length: n] 
        /// Specifies an array in which the generated buffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenBuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenBuffers(Int32 n, [OutAttribute] UInt32* buffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate a complete set of mipmaps for a texture object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the texture target of the active texture unit to which the texture object is bound whose mipmaps will be generated.  Must be one of the following symbolic constants: Texture2D or TextureCubeMap.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenerateMipmap")]
        public static void GenerateMipmap(OpenTK.Graphics.ES20.TextureTarget target) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public unsafe static Int32 GenFramebuffer() 
        {
        	uint[] framebuffers = new uint[1];
        	fixed (uint* ptr = framebuffers)
			{
				glGenFramebuffers(1, ptr);
			}
        	return (int)framebuffers[0];
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer object names to be generated.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute] Int32[] framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer object names to be generated.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute] out Int32 framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer object names to be generated.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenFramebuffers(Int32 n, [OutAttribute] Int32* framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer object names to be generated.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute] UInt32[] framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer object names to be generated.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static void GenFramebuffers(Int32 n, [OutAttribute] out UInt32 framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate framebuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of framebuffer object names to be generated.
        /// </param>
        /// <param name="framebuffers">[length: n] 
        /// Specifies an array in which the generated framebuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenFramebuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenFramebuffers(Int32 n, [OutAttribute] UInt32* framebuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static Int32 GenRenderbuffer() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer object names to be generated.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute] Int32[] renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer object names to be generated.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute] out Int32 renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer object names to be generated.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenRenderbuffers(Int32 n, [OutAttribute] Int32* renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer object names to be generated.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute] UInt32[] renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer object names to be generated.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static void GenRenderbuffers(Int32 n, [OutAttribute] out UInt32 renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate renderbuffer object names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of renderbuffer object names to be generated.
        /// </param>
        /// <param name="renderbuffers">[length: n] 
        /// Specifies an array in which the generated renderbuffer object names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenRenderbuffers")]
        [CLSCompliant(false)]
        public static unsafe void GenRenderbuffers(Int32 n, [OutAttribute] UInt32* renderbuffers) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static Int32 GenTexture() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public unsafe static void GenTextures(Int32 n, [OutAttribute] Int32[] textures) 
        { 
			fixed (int* ptr = textures)
			{
				glGenTextures(n, (uint*)ptr);
			}
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public unsafe static void GenTextures(Int32 n, [OutAttribute] out Int32 textures) 
        { 
			fixed (int* ptr = &textures)
			{
				glGenTextures(n, (uint*)ptr);
				textures = *ptr;
			}
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static unsafe void GenTextures(Int32 n, [OutAttribute] Int32* textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute] UInt32[] textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static void GenTextures(Int32 n, [OutAttribute] out UInt32 textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Generate texture names
        /// </summary>
        /// <param name="n"> 
        /// Specifies the number of texture names to be generated.
        /// </param>
        /// <param name="textures">[length: n] 
        /// Specifies an array in which the generated texture names are stored.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGenTextures")]
        [CLSCompliant(false)]
        public static unsafe void GenTextures(Int32 n, [OutAttribute] UInt32* textures) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES20.ActiveAttribType type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES20.ActiveAttribType* type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES20.ActiveAttribType type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the attribute variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the attribute variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the attribute variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the attribute variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveAttrib")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES20.ActiveAttribType* type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES20.ActiveUniformType type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES20.ActiveUniformType* type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] out Int32 size, [OutAttribute] out OpenTK.Graphics.ES20.ActiveUniformType type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return information about an active uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="index"> 
        /// Specifies the index of the uniform variable to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the maximum number of characters OpenGL is allowed to write in the character buffer indicated by name.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the number of characters actually written by OpenGL in the string indicated by name (excluding the null terminator) if a value other than Null is passed.
        /// </param>
        /// <param name="size">[length: 1] 
        /// Returns the size of the uniform variable.
        /// </param>
        /// <param name="type">[length: 1] 
        /// Returns the data type of the uniform variable.
        /// </param>
        /// <param name="name">[length: bufSize] 
        /// Returns a null terminated string containing the name of the uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetActiveUniform")]
        [CLSCompliant(false)]
        public static unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] Int32* size, [OutAttribute] OpenTK.Graphics.ES20.ActiveUniformType* type, [OutAttribute] StringBuilder name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount"> 
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1] 
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount] 
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] Int32[] shaders) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount"> 
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1] 
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount] 
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] out Int32 shaders) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount"> 
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1] 
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount] 
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static unsafe void GetAttachedShaders(Int32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] Int32* shaders) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount"> 
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1] 
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount] 
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] UInt32[] shaders) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount"> 
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1] 
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount] 
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] out Int32 count, [OutAttribute] out UInt32 shaders) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the handles of the shader objects attached to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="maxCount"> 
        /// Specifies the size of the array for storing the returned object names.
        /// </param>
        /// <param name="count">[length: 1] 
        /// Returns the number of names actually returned in shaders.
        /// </param>
        /// <param name="shaders">[length: maxCount] 
        /// Specifies an array that is used to return the names of attached shader objects.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttachedShaders")]
        [CLSCompliant(false)]
        public static unsafe void GetAttachedShaders(UInt32 program, Int32 maxCount, [OutAttribute] Int32* count, [OutAttribute] UInt32* shaders) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the location of an attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name"> 
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        [CLSCompliant(false)]
        public static Int32 GetAttribLocation(Int32 program, String name) 
        {
        	return glGetAttribLocation((uint)program, MarshalStringToPtr(name));
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the location of an attribute variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name"> 
        /// Points to a null terminated string containing the name of the attribute variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetAttribLocation")]
        [CLSCompliant(false)]
        public static Int32 GetAttribLocation(UInt32 program, String name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static bool GetBoolean(OpenTK.Graphics.ES20.GetPName pname) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] bool[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static void GetBoolean(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] out bool data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBooleanv")]
        [CLSCompliant(false)]
        public static unsafe void GetBoolean(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] bool* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferParameterName pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetBufferParameter(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferParameterName pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a buffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target buffer object. The symbolic constant must be ArrayBuffer or ElementArrayBuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a buffer object parameter. Accepted values are BufferSize or BufferUsage.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetBufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetBufferParameter(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferParameterName pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.DebugSourceExternal[] sources, [OutAttribute] OpenTK.Graphics.ES20.DebugType[] types, [OutAttribute] Int32[] ids, [OutAttribute] OpenTK.Graphics.ES20.DebugSeverity[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES20.DebugSourceExternal sources, [OutAttribute] out OpenTK.Graphics.ES20.DebugType types, [OutAttribute] out Int32 ids, [OutAttribute] out OpenTK.Graphics.ES20.DebugSeverity severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static unsafe Int32 GetDebugMessageLog(Int32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.DebugSourceExternal* sources, [OutAttribute] OpenTK.Graphics.ES20.DebugType* types, [OutAttribute] Int32* ids, [OutAttribute] OpenTK.Graphics.ES20.DebugSeverity* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.DebugSourceExternal[] sources, [OutAttribute] OpenTK.Graphics.ES20.DebugType[] types, [OutAttribute] UInt32[] ids, [OutAttribute] OpenTK.Graphics.ES20.DebugSeverity[] severities, [OutAttribute] Int32[] lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] out OpenTK.Graphics.ES20.DebugSourceExternal sources, [OutAttribute] out OpenTK.Graphics.ES20.DebugType types, [OutAttribute] out UInt32 ids, [OutAttribute] out OpenTK.Graphics.ES20.DebugSeverity severities, [OutAttribute] out Int32 lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>
        /// Retrieve messages from the debug message log
        /// </summary>
        /// <param name="count"> 
        /// The number of debug messages to retrieve from the log.
        /// </param>
        /// <param name="bufSize"> 
        /// The size of the buffer whose address is given by messageLog.
        /// </param>
        /// <param name="sources">[length: count] 
        /// The address of an array of variables to receive the sources of the retrieved messages.
        /// </param>
        /// <param name="types">[length: count] 
        /// The address of an array of variables to receive the types of the retrieved messages.
        /// </param>
        /// <param name="ids">[length: count] 
        /// The address of an array of unsigned integers to receive the ids of the retrieved messages.
        /// </param>
        /// <param name="severities">[length: count] 
        /// The address of an array of variables to receive the severites of the retrieved messages.
        /// </param>
        /// <param name="lengths">[length: count] 
        /// The address of an array of variables to receive the lengths of the received messages.
        /// </param>
        /// <param name="messageLog">[length: bufSize] 
        /// The address of an array of characters that will receive the messages.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetDebugMessageLog")]
        [CLSCompliant(false)]
        public static unsafe Int32 GetDebugMessageLog(UInt32 count, Int32 bufSize, [OutAttribute] OpenTK.Graphics.ES20.DebugSourceExternal* sources, [OutAttribute] OpenTK.Graphics.ES20.DebugType* types, [OutAttribute] UInt32* ids, [OutAttribute] OpenTK.Graphics.ES20.DebugSeverity* severities, [OutAttribute] Int32* lengths, [OutAttribute] StringBuilder messageLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return error information
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetError")]
        public static OpenTK.Graphics.ES20.ErrorCode GetError() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static Single GetFloat(OpenTK.Graphics.ES20.GetPName pname) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] Single[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static void GetFloat(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] out Single data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFloatv")]
        [CLSCompliant(false)]
        public static unsafe void GetFloat(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] Single* data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return attachment parameters of a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the symbolic name of a framebuffer object attachment point. Accepted values are ColorAttachment0, DepthAttachment, and StencilAttachment.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are FramebufferAttachmentObjectType, FramebufferAttachmentObjectName, FramebufferAttachmentTextureLevel, and FramebufferAttachmentTextureCubeMapFace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.FramebufferParameterName pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return attachment parameters of a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the symbolic name of a framebuffer object attachment point. Accepted values are ColorAttachment0, DepthAttachment, and StencilAttachment.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are FramebufferAttachmentObjectType, FramebufferAttachmentObjectName, FramebufferAttachmentTextureLevel, and FramebufferAttachmentTextureCubeMapFace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.FramebufferParameterName pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return attachment parameters of a framebuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target framebuffer object. The symbolic constant must be Framebuffer.
        /// </param>
        /// <param name="attachment"> 
        /// Specifies the symbolic name of a framebuffer object attachment point. Accepted values are ColorAttachment0, DepthAttachment, and StencilAttachment.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a framebuffer object attachment parameter. Accepted values are FramebufferAttachmentObjectType, FramebufferAttachmentObjectName, FramebufferAttachmentTextureLevel, and FramebufferAttachmentTextureCubeMapFace.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetFramebufferAttachmentParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetFramebufferAttachmentParameter(OpenTK.Graphics.ES20.FramebufferTarget target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.FramebufferParameterName pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static Int32 GetInteger(OpenTK.Graphics.ES20.GetPName pname) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] Int32[] data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static void GetInteger(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] out Int32 data) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="pname"></param>
        /// <param name="data">[length: pname]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetIntegerv")]
        [CLSCompliant(false)]
        public static unsafe void GetInteger(OpenTK.Graphics.ES20.GetPName pname, [OutAttribute] Int32* data) { throw new NotImplementedException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        public static void GetPointer(OpenTK.Graphics.ES20.GetPointervPName pname, [OutAttribute] IntPtr @params) { throw new NotImplementedException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES20.GetPointervPName pname, [InAttribute, OutAttribute] T1[] @params)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES20.GetPointervPName pname, [InAttribute, OutAttribute] T1[,] @params)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        [CLSCompliant(false)]
        public static void GetPointer<T1>(OpenTK.Graphics.ES20.GetPointervPName pname, [InAttribute, OutAttribute] T1[,,] @params)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Return the address of the specified pointer
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the array or buffer pointer to be returned. Symbolic constants ColorArrayPointer, EdgeFlagArrayPointer, FogCoordArrayPointer, FeedbackBufferPointer, IndexArrayPointer, NormalArrayPointer, SecondaryColorArrayPointer, SelectionBufferPointer, TextureCoordArrayPointer, or VertexArrayPointer are accepted.
        /// </param>
        /// <param name="@params">[length: 1] 
        /// Returns the pointer value specified by pname.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glGetPointerv")]
        public static void GetPointer<T1>(OpenTK.Graphics.ES20.GetPointervPName pname, [InAttribute, OutAttribute] ref T1 @params)
            where T1 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramInfoLog(Int32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetProgramInfoLog(UInt32 program, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(Int32 program, OpenTK.Graphics.ES20.GetProgramParameterName pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(Int32 program, OpenTK.Graphics.ES20.GetProgramParameterName pname, [OutAttribute] out Int32 @params) { 
        	fixed (int* ptr = &@params)
			{
        		glGetProgramiv((uint)program, (int)pname, ptr);
        		@params = *ptr;
        	}
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(Int32 program, OpenTK.Graphics.ES20.GetProgramParameterName pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenTK.Graphics.ES20.GetProgramParameterName pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static void GetProgram(UInt32 program, OpenTK.Graphics.ES20.GetProgramParameterName pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are DeleteStatus, LinkStatus, ValidateStatus, InfoLogLength, AttachedShaders, ActiveAttributes, ActiveAttributeMaxLength, ActiveUniforms, ActiveUniformMaxLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetProgramiv")]
        [CLSCompliant(false)]
        public static unsafe void GetProgram(UInt32 program, OpenTK.Graphics.ES20.GetProgramParameterName pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a renderbuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target renderbuffer object. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a renderbuffer object parameter. Accepted values are RenderbufferWidth, RenderbufferHeight, RenderbufferInternalFormat, RenderbufferRedSize, RenderbufferGreenSize, RenderbufferBlueSize, RenderbufferAlphaSize, RenderbufferDepthSize, or RenderbufferStencilSize.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetRenderbufferParameter(OpenTK.Graphics.ES20.RenderbufferTarget target, OpenTK.Graphics.ES20.RenderbufferParameterName pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a renderbuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target renderbuffer object. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a renderbuffer object parameter. Accepted values are RenderbufferWidth, RenderbufferHeight, RenderbufferInternalFormat, RenderbufferRedSize, RenderbufferGreenSize, RenderbufferBlueSize, RenderbufferAlphaSize, RenderbufferDepthSize, or RenderbufferStencilSize.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static void GetRenderbufferParameter(OpenTK.Graphics.ES20.RenderbufferTarget target, OpenTK.Graphics.ES20.RenderbufferParameterName pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return parameters of a renderbuffer object
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target renderbuffer object. The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a renderbuffer object parameter. Accepted values are RenderbufferWidth, RenderbufferHeight, RenderbufferInternalFormat, RenderbufferRedSize, RenderbufferGreenSize, RenderbufferBlueSize, RenderbufferAlphaSize, RenderbufferDepthSize, or RenderbufferStencilSize.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetRenderbufferParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetRenderbufferParameter(OpenTK.Graphics.ES20.RenderbufferTarget target, OpenTK.Graphics.ES20.RenderbufferParameterName pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderInfoLog(Int32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder infoLog) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the information log for a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object whose information log is to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned information log.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in infoLog (excluding the null terminator).
        /// </param>
        /// <param name="infoLog">[length: bufSize] 
        /// Specifies an array of characters that is used to return the information log.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderInfoLog")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderInfoLog(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder infoLog) { 
        	IntPtr ptr =  Marshal.AllocHGlobal(bufSize);
        	glGetShaderInfoLog(shader, bufSize, length, ptr);
        	MarshalPtrToStringBuilder(ptr, infoLog);
        	Marshal.FreeHGlobal(ptr);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(Int32 shader, OpenTK.Graphics.ES20.ShaderParameter pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public unsafe static void GetShader(Int32 shader, OpenTK.Graphics.ES20.ShaderParameter pname, [OutAttribute] out Int32 @params) { 
			fixed (int* ptr = &@params)
			{
				glGetShaderiv((uint)shader, (int)pname, ptr);
				@params = *ptr;
			} 
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static unsafe void GetShader(Int32 shader, OpenTK.Graphics.ES20.ShaderParameter pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(UInt32 shader, OpenTK.Graphics.ES20.ShaderParameter pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static void GetShader(UInt32 shader, OpenTK.Graphics.ES20.ShaderParameter pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a parameter from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the object parameter. Accepted symbolic names are ShaderType, DeleteStatus, CompileStatus, InfoLogLength, ShaderSourceLength.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the requested object parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderiv")]
        [CLSCompliant(false)]
        public static unsafe void GetShader(UInt32 shader, OpenTK.Graphics.ES20.ShaderParameter pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the range and precision for different shader numeric formats
        /// </summary>
        /// <param name="shadertype"> 
        /// Specifies the type of shader to query. Must be either VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype"> 
        /// Specifies the numeric format to query, corresponding to a shader precision qualifier and variable type. Must be one of LowFloat, MediumFloat, HighFloat, LowInt, MediumInt, or HighInt.
        /// </param>
        /// <param name="range">[length: 2] 
        /// Specifies a pointer to the two-element array in which the log sub 2 of the minimum and maximum representable magnitudes of the format are returned.
        /// </param>
        /// <param name="precision">[length: 2] 
        /// Specifies a pointer to the location in which the log sub 2 of the precision of the format is returned.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.ES20.ShaderType shadertype, OpenTK.Graphics.ES20.ShaderPrecision precisiontype, [OutAttribute] Int32[] range, [OutAttribute] Int32[] precision) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the range and precision for different shader numeric formats
        /// </summary>
        /// <param name="shadertype"> 
        /// Specifies the type of shader to query. Must be either VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype"> 
        /// Specifies the numeric format to query, corresponding to a shader precision qualifier and variable type. Must be one of LowFloat, MediumFloat, HighFloat, LowInt, MediumInt, or HighInt.
        /// </param>
        /// <param name="range">[length: 2] 
        /// Specifies a pointer to the two-element array in which the log sub 2 of the minimum and maximum representable magnitudes of the format are returned.
        /// </param>
        /// <param name="precision">[length: 2] 
        /// Specifies a pointer to the location in which the log sub 2 of the precision of the format is returned.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static void GetShaderPrecisionFormat(OpenTK.Graphics.ES20.ShaderType shadertype, OpenTK.Graphics.ES20.ShaderPrecision precisiontype, [OutAttribute] out Int32 range, [OutAttribute] out Int32 precision) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the range and precision for different shader numeric formats
        /// </summary>
        /// <param name="shadertype"> 
        /// Specifies the type of shader to query. Must be either VertexShader or FragmentShader.
        /// </param>
        /// <param name="precisiontype"> 
        /// Specifies the numeric format to query, corresponding to a shader precision qualifier and variable type. Must be one of LowFloat, MediumFloat, HighFloat, LowInt, MediumInt, or HighInt.
        /// </param>
        /// <param name="range">[length: 2] 
        /// Specifies a pointer to the two-element array in which the log sub 2 of the minimum and maximum representable magnitudes of the format are returned.
        /// </param>
        /// <param name="precision">[length: 2] 
        /// Specifies a pointer to the location in which the log sub 2 of the precision of the format is returned.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderPrecisionFormat")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderPrecisionFormat(OpenTK.Graphics.ES20.ShaderType shadertype, OpenTK.Graphics.ES20.ShaderPrecision precisiontype, [OutAttribute] Int32* range, [OutAttribute] Int32* precision) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the source code string from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize] 
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the source code string from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize] 
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderSource(Int32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the source code string from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize] 
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder source) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the source code string from a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the shader object to be queried.
        /// </param>
        /// <param name="bufSize"> 
        /// Specifies the size of the character buffer for storing the returned source code string.
        /// </param>
        /// <param name="length">[length: 1] 
        /// Returns the length of the string returned in source (excluding the null terminator).
        /// </param>
        /// <param name="source">[length: bufSize] 
        /// Specifies an array of characters that is used to return the source code string.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetShaderSource")]
        [CLSCompliant(false)]
        public static unsafe void GetShaderSource(UInt32 shader, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder source) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a string describing the current GL connection
        /// </summary>
        /// <param name="name"> 
        /// Specifies a symbolic constant, one of Vendor, Renderer, Version, ShadingLanguageVersion, or Extensions.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetString")]
        public static String GetString(OpenTK.Graphics.ES20.StringName name) 
        { 
        	IntPtr ptr = glGetString((int)name);
        	StringBuilder sb = new StringBuilder();
        	MarshalPtrToStringBuilder(ptr, sb);
        	return sb.ToString();
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return texture parameter values
        /// </summary>
        /// <param name="target"> 
        /// Specifies the symbolic name of the target texture of the active texture unit. Texture2D and TextureCubeMap are accepted.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a texture parameter. TextureMagFilter, TextureMinFilter, TextureWrapS, and TextureWrapT are accepted.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Returns the texture parameter.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetTexParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void GetTexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.GetTextureParameterName pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program, location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program, location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program, location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program, location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program, location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program, location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformfv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program, location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program, location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static void GetUniform(Int32 program, Int32 location, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program, location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(Int32 program, Int32 location, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program, location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program, location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static void GetUniform(UInt32 program, Int32 location, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the value of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be queried.
        /// </param>
        /// <param name="@params">[length: program, location] 
        /// Returns the value of the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformiv")]
        [CLSCompliant(false)]
        public static unsafe void GetUniform(UInt32 program, Int32 location, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the location of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name"> 
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        [CLSCompliant(false)]
        public static Int32 GetUniformLocation(Int32 program, String name) 
        { 
        	return glGetUniformLocation((uint)program, MarshalStringToPtr(name));
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the location of a uniform variable
        /// </summary>
        /// <param name="program"> 
        /// Specifies the program object to be queried.
        /// </param>
        /// <param name="name"> 
        /// Points to a null terminated string containing the name of the uniform variable whose location is to be queried.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetUniformLocation")]
        [CLSCompliant(false)]
        public static Int32 GetUniformLocation(UInt32 program, String name) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] out Single @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribfv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(Int32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] out Int32 @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return a generic vertex attribute parameter
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be queried.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the vertex attribute parameter to be queried. Accepted values are VertexAttribArrayBufferBinding, VertexAttribArrayEnabled, VertexAttribArraySize, VertexAttribArrayStride, VertexAttribArrayType, VertexAttribArrayNormalized, or CurrentVertexAttrib.
        /// </param>
        /// <param name="@params">[length: 4] 
        /// Returns the requested data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribiv")]
        [CLSCompliant(false)]
        public static unsafe void GetVertexAttrib(UInt32 index, OpenTK.Graphics.ES20.VertexAttribParameter pname, [OutAttribute] Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer(Int32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [OutAttribute] IntPtr pointer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(Int32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer(UInt32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [OutAttribute] IntPtr pointer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] T2[,,] pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Return the address of the specified generic vertex attribute pointer
        /// </summary>
        /// <param name="index"> 
        /// Specifies the generic vertex attribute parameter to be returned.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the generic vertex attribute parameter to be returned. Must be VertexAttribArrayPointer.
        /// </param>
        /// <param name="pointer">[length: 1] 
        /// Returns the pointer value.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glGetVertexAttribPointerv")]
        [CLSCompliant(false)]
        public static void GetVertexAttribPointer<T2>(UInt32 index, OpenTK.Graphics.ES20.VertexAttribPointerParameter pname, [InAttribute, OutAttribute] ref T2 pointer)
            where T2 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify implementation-specific hints
        /// </summary>
        /// <param name="target"> 
        /// Specifies a symbolic constant indicating the behavior to be controlled. GenerateMipmapHint is accepted.
        /// </param>
        /// <param name="mode"> 
        /// Specifies a symbolic constant indicating the desired behavior. Fastest, Nicest, and DontCare are accepted.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glHint")]
        public static void Hint(OpenTK.Graphics.ES20.HintTarget target, OpenTK.Graphics.ES20.HintMode mode) 
        { 
        	glHint((int)target, (int)mode);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer"> 
        /// Specifies a value that may be the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsBuffer")]
        [CLSCompliant(false)]
        public static bool IsBuffer(Int32 buffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a buffer object
        /// </summary>
        /// <param name="buffer"> 
        /// Specifies a value that may be the name of a buffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsBuffer")]
        [CLSCompliant(false)]
        public static bool IsBuffer(UInt32 buffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Test whether a capability is enabled
        /// </summary>
        /// <param name="cap"> 
        /// Specifies a symbolic constant indicating a GL capability.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsEnabled")]
        public static bool IsEnabled(OpenTK.Graphics.ES20.EnableCap cap) 
        { 
        	return glIsEnabled((int)cap) != 0;
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a framebuffer object
        /// </summary>
        /// <param name="framebuffer"> 
        /// Specifies a value that may be the name of a framebuffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsFramebuffer")]
        [CLSCompliant(false)]
        public static bool IsFramebuffer(Int32 framebuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a framebuffer object
        /// </summary>
        /// <param name="framebuffer"> 
        /// Specifies a value that may be the name of a framebuffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsFramebuffer")]
        [CLSCompliant(false)]
        public static bool IsFramebuffer(UInt32 framebuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies a potential program object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsProgram")]
        [CLSCompliant(false)]
        public static bool IsProgram(Int32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies a potential program object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsProgram")]
        [CLSCompliant(false)]
        public static bool IsProgram(UInt32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a renderbuffer object
        /// </summary>
        /// <param name="renderbuffer"> 
        /// Specifies a value that may be the name of a renderbuffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsRenderbuffer")]
        [CLSCompliant(false)]
        public static bool IsRenderbuffer(Int32 renderbuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a renderbuffer object
        /// </summary>
        /// <param name="renderbuffer"> 
        /// Specifies a value that may be the name of a renderbuffer object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsRenderbuffer")]
        [CLSCompliant(false)]
        public static bool IsRenderbuffer(UInt32 renderbuffer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies a potential shader object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsShader")]
        [CLSCompliant(false)]
        public static bool IsShader(Int32 shader) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies a potential shader object.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsShader")]
        [CLSCompliant(false)]
        public static bool IsShader(UInt32 shader) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture"> 
        /// Specifies a value that may be the name of a texture.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsTexture")]
        [CLSCompliant(false)]
        public static bool IsTexture(Int32 texture) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Determine if a name corresponds to a texture
        /// </summary>
        /// <param name="texture"> 
        /// Specifies a value that may be the name of a texture.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glIsTexture")]
        [CLSCompliant(false)]
        public static bool IsTexture(UInt32 texture) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the width of rasterized lines
        /// </summary>
        /// <param name="width"> 
        /// Specifies the width of rasterized lines. The initial value is 1.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glLineWidth")]
        public static void LineWidth(Single width) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Link a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the handle of the program object to be linked.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
        [CLSCompliant(false)]
        public static void LinkProgram(Int32 program) { glLinkProgram((uint)program); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Link a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the handle of the program object to be linked.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glLinkProgram")]
        [CLSCompliant(false)]
        public static void LinkProgram(UInt32 program) { throw new NotImplementedException(); }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object to label.
        /// </param>
        /// <param name="length"> 
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: label,length] 
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabel")]
        [CLSCompliant(false)]
        public static void ObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, Int32 name, Int32 length, String label) { throw new NotImplementedException(); }

        /// <summary>
        /// Label a named object identified within a namespace
        /// </summary>
        /// <param name="identifier"> 
        /// The namespace from which the name of the object is allocated.
        /// </param>
        /// <param name="name"> 
        /// The name of the object to label.
        /// </param>
        /// <param name="length"> 
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: label,length] 
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectLabel")]
        [CLSCompliant(false)]
        public static void ObjectLabel(OpenTK.Graphics.ES20.ObjectLabelIdentifier identifier, UInt32 name, Int32 length, String label) { throw new NotImplementedException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length"> 
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: label,length] 
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel(IntPtr ptr, Int32 length, String label) { throw new NotImplementedException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length"> 
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: label,length] 
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[] ptr, Int32 length, String label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length"> 
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: label,length] 
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,] ptr, Int32 length, String label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length"> 
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: label,length] 
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        [CLSCompliant(false)]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] T0[,,] ptr, Int32 length, String label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>
        /// Label a a sync object identified by a pointer
        /// </summary>
        /// <param name="ptr"> 
        /// A pointer identifying a sync object.
        /// </param>
        /// <param name="length"> 
        /// The length of the label to be used for the object.
        /// </param>
        /// <param name="label">[length: label,length] 
        /// The address of a string containing the label to assign to the object.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glObjectPtrLabel")]
        public static void ObjectPtrLabel<T0>([InAttribute, OutAttribute] ref T0 ptr, Int32 length, String label)
            where T0 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set pixel storage modes
        /// </summary>
        /// <param name="pname"> 
        /// Specifies the symbolic name of the parameter to be set. One value affects the packing of pixel data into memory: PackAlignment. The other affects the unpacking of pixel data from memory: UnpackAlignment.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value that pname is set to.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glPixelStorei")]
        public static void PixelStore(OpenTK.Graphics.ES20.PixelStoreParameter pname, Int32 param) 
        { 
        	glPixelStorei((int)pname, param);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set the scale and units used to calculate depth values
        /// </summary>
        /// <param name="factor"> 
        /// Specifies a scale factor that is used to create a variable depth offset for each polygon. The initial value is 0.
        /// </param>
        /// <param name="units"> 
        /// Is multiplied by an implementation-specific value to create a constant depth offset. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glPolygonOffset")]
        public static void PolygonOffset(Single factor, Single units) { throw new NotImplementedException(); }

        /// <summary>
        /// Pop the active debug group
        /// </summary>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPopDebugGroup")]
        public static void PopDebugGroup() { throw new NotImplementedException(); }

        /// <summary>
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source"> 
        /// The source of the debug message.
        /// </param>
        /// <param name="id"> 
        /// The identifier of the message.
        /// </param>
        /// <param name="length"> 
        /// The length of the message to be sent to the debug output stream.
        /// </param>
        /// <param name="message">[length: message,length] 
        /// The a string containing the message to be sent to the debug output stream.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroup")]
        [CLSCompliant(false)]
        public static void PushDebugGroup(OpenTK.Graphics.ES20.All source, Int32 id, Int32 length, String message) { throw new NotImplementedException(); }

        /// <summary>
        /// Push a named debug group into the command stream
        /// </summary>
        /// <param name="source"> 
        /// The source of the debug message.
        /// </param>
        /// <param name="id"> 
        /// The identifier of the message.
        /// </param>
        /// <param name="length"> 
        /// The length of the message to be sent to the debug output stream.
        /// </param>
        /// <param name="message">[length: message,length] 
        /// The a string containing the message to be sent to the debug output stream.
        /// </param>
        [AutoGenerated(Category = "KHR_debug", Version = "", EntryPoint = "glPushDebugGroup")]
        [CLSCompliant(false)]
        public static void PushDebugGroup(OpenTK.Graphics.ES20.All source, UInt32 id, Int32 length, String message) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [OutAttribute] IntPtr pixels) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T6[] pixels)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T6[,] pixels)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        [CLSCompliant(false)]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T6[,,] pixels)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Read a block of pixels from the frame buffer
        /// </summary>
        /// <param name="x"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="y"> 
        /// Specify the window coordinates of the first pixel that is read from the frame buffer. This location is the lower left corner of a rectangular block of pixels.
        /// </param>
        /// <param name="width"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="height"> 
        /// Specify the dimensions of the pixel rectangle. width and height of one correspond to a single pixel.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, and Rgba.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. Must be one of UnsignedByte, UnsignedShort565, UnsignedShort4444, or UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Returns the pixel data.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReadPixels")]
        public static void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] ref T6 pixels)
            where T6 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Release resources allocated by the shader compiler
        /// </summary>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glReleaseShaderCompiler")]
        public static void ReleaseShaderCompiler() { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Create and initialize a renderbuffer object's data store
        /// </summary>
        /// <param name="target"> 
        /// Specifies the renderbuffer target.  The symbolic constant must be Renderbuffer.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the color-renderable, depth-renderable, or stencil-renderable format of the renderbuffer. Must be one of the following symbolic constants: Rgba4, Rgb565, Rgb5A1, DepthComponent16, or StencilIndex8.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the renderbuffer in pixels.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the renderbuffer in pixels.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glRenderbufferStorage")]
        public static void RenderbufferStorage(OpenTK.Graphics.ES20.RenderbufferTarget target, OpenTK.Graphics.ES20.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify multisample coverage parameters
        /// </summary>
        /// <param name="value"> 
        /// Specify a single floating-point sample coverage value.  The value is clamped to the range [0 ,1]. The initial value is 1.0.
        /// </param>
        /// <param name="invert"> 
        /// Specify a single boolean value representing if the coverage masks should be inverted.  True and False are accepted.  The initial value is False.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glSampleCoverage")]
        public static void SampleCoverage(Single value, bool invert) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define the scissor box
        /// </summary>
        /// <param name="x"> 
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="y"> 
        /// Specify the lower left corner of the scissor box. Initially (0, 0).
        /// </param>
        /// <param name="width"> 
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height"> 
        /// Specify the width and height of the scissor box. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glScissor")]
        public static void Scissor(Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, Int32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, Int32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref Int32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary(Int32 count, Int32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, Int32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, UInt32[] shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static void ShaderBinary<T3>(Int32 count, ref UInt32 shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary(Int32 count, UInt32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] T3[,,] binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Load a precompiled shader binary
        /// </summary>
        /// <param name="count"> 
        /// Specifies the number of shader object handles present in shaders.
        /// </param>
        /// <param name="shaders">[length: count] 
        /// Specifies a pointer to an array of shader object handles into which the shader binary will be loaded.
        /// </param>
        /// <param name="binaryformat"> 
        /// Specifies the shader binary format.
        /// </param>
        /// <param name="binary">[length: length] 
        /// Specifies a pointer to the shader binary data in client memory.
        /// </param>
        /// <param name="length"> 
        /// Specifies the length of the shader binary data in bytes.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderBinary")]
        [CLSCompliant(false)]
        public static unsafe void ShaderBinary<T3>(Int32 count, UInt32* shaders, OpenTK.Graphics.ES20.ShaderBinaryFormat binaryformat, [InAttribute, OutAttribute] ref T3 binary, Int32 length)
            where T3 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replace the source code in a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count] 
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count] 
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public unsafe static void ShaderSource(Int32 shader, Int32 count, String[] @string, Int32[] length) { 
			fixed (int* ptr = length)
			{
//				fixed(byte* source	= Encoding.ASCII.GetBytes(@string[0]))
//					fixed(byte** sources	= new byte*[] { source })
//						glShaderSource((uint)shader, count, (IntPtr)sources, ptr);
				glShaderSource((uint)shader, count, MarshalStringArrayToPtr(@string), ptr);
			}
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replace the source code in a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count] 
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count] 
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static void ShaderSource(Int32 shader, Int32 count, String[] @string, ref Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replace the source code in a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count] 
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count] 
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static unsafe void ShaderSource(Int32 shader, Int32 count, String[] @string, Int32* length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replace the source code in a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count] 
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count] 
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static void ShaderSource(UInt32 shader, Int32 count, String[] @string, Int32[] length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replace the source code in a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count] 
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count] 
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static void ShaderSource(UInt32 shader, Int32 count, String[] @string, ref Int32 length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Replace the source code in a shader object
        /// </summary>
        /// <param name="shader"> 
        /// Specifies the handle of the shader object whose source code is to be replaced.
        /// </param>
        /// <param name="count"> 
        /// Specifies the number of elements in the string and length arrays.
        /// </param>
        /// <param name="@string">[length: count] 
        /// Specifies an array of pointers to strings containing the source code to be loaded into the shader.
        /// </param>
        /// <param name="length">[length: count] 
        /// Specifies an array of string lengths.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glShaderSource")]
        [CLSCompliant(false)]
        public static unsafe void ShaderSource(UInt32 shader, Int32 count, String[] @string, Int32* length) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFunc")]
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES20.StencilFunction func, Int32 @ref, Int32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back function and reference value for stencil testing
        /// </summary>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFunc")]
        [CLSCompliant(false)]
        public static void StencilFunc(OpenTK.Graphics.ES20.StencilFunction func, Int32 @ref, UInt32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES20.StencilFace face, OpenTK.Graphics.ES20.StencilFunction func, Int32 @ref, Int32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back function and reference value for stencil testing
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="func"> 
        /// Specifies the test function. Eight symbolic constants are valid: Never, Less, Lequal, Greater, Gequal, Equal, Notequal, and Always. The initial value is Always.
        /// </param>
        /// <param name="@ref"> 
        /// Specifies the reference value for the stencil test. ref is clamped to the range [0, 2 sup n - 1], where  is the number of bitplanes in the stencil buffer. The initial value is 0.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a mask that is ANDed with both the reference value and the stored stencil value when the test is done. The initial value is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilFuncSeparate")]
        [CLSCompliant(false)]
        public static void StencilFuncSeparate(OpenTK.Graphics.ES20.StencilFace face, OpenTK.Graphics.ES20.StencilFunction func, Int32 @ref, UInt32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask"> 
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMask")]
        [CLSCompliant(false)]
        public static void StencilMask(Int32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="mask"> 
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMask")]
        [CLSCompliant(false)]
        public static void StencilMask(UInt32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES20.StencilFace face, Int32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Control the front and/or back writing of individual bits in the stencil planes
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether the front and/or back stencil writemask is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="mask"> 
        /// Specifies a bit mask to enable and disable writing of individual bits in the stencil planes. Initially, the mask is all 1's.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilMaskSeparate")]
        [CLSCompliant(false)]
        public static void StencilMaskSeparate(OpenTK.Graphics.ES20.StencilFace face, UInt32 mask) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and back stencil test actions
        /// </summary>
        /// <param name="fail"> 
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="zfail"> 
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="zpass"> 
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOp")]
        public static void StencilOp(OpenTK.Graphics.ES20.StencilOp fail, OpenTK.Graphics.ES20.StencilOp zfail, OpenTK.Graphics.ES20.StencilOp zpass) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set front and/or back stencil test actions
        /// </summary>
        /// <param name="face"> 
        /// Specifies whether front and/or back stencil state is updated. Three symbolic constants are valid: Front, Back, and FrontAndBack.
        /// </param>
        /// <param name="sfail"> 
        /// Specifies the action to take when the stencil test fails. Eight symbolic constants are accepted: Keep, Zero, Replace, Incr, IncrWrap, Decr, DecrWrap, and Invert. The initial value is Keep.
        /// </param>
        /// <param name="dpfail"> 
        /// Specifies the stencil action when the stencil test passes, but the depth test fails. dpfail accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        /// <param name="dppass"> 
        /// Specifies the stencil action when both the stencil test and the depth test pass, or when the stencil test passes and either there is no depth buffer or depth testing is not enabled. dppass accepts the same symbolic constants as sfail. The initial value is Keep.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glStencilOpSeparate")]
        public static void StencilOpSeparate(OpenTK.Graphics.ES20.StencilFace face, OpenTK.Graphics.ES20.StencilOp sfail, OpenTK.Graphics.ES20.StencilOp dpfail, OpenTK.Graphics.ES20.StencilOp dppass) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, IntPtr pixels) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
        { 
      		GCHandle gCHandle = GCHandle.Alloc(pixels, GCHandleType.Pinned);
			try
			{
				glTexImage2D((int)target, level, (int)internalformat, width, height, border, (int)format, (int)type, gCHandle.AddrOfPinnedObject());
			}
			finally
			{
				gCHandle.Free();
			}
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        [CLSCompliant(false)]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture image
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="internalformat"> 
        /// Specifies the internal format of the texture. Must be one of the following symbolic constants: Alpha, Luminance, LuminanceAlpha, Rgb, Rgba.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture image. All implementations support 2D texture images that are at least 64 texels wide and cube-mapped texture images that are at least 16 texels wide.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture image All implementations support 2D texture images that are at least 64 texels high and cube-mapped texture images that are at least 16 texels high.
        /// </param>
        /// <param name="border"> 
        /// Specifies the width of the border. Must be 0.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the texel data.  Must match internalformat. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the texel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexImage2D")]
        public static void TexImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterf")]
        public static void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, Single param) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterfv")]
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, Single[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameterfv")]
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, Single* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="param"> 
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteri")]
        public static void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, Int32 param) 
        { 
        	glTexParameteri((int)target, (int)pname, param);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteriv")]
        [CLSCompliant(false)]
        public static void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, Int32[] @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set texture parameters
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit, which must be either Texture2D or TextureCubeMap.
        /// </param>
        /// <param name="pname"> 
        /// Specifies the symbolic name of a single-valued texture parameter. pname can be one of the following: TextureMinFilter, TextureMagFilter, TextureWrapS, or TextureWrapT.
        /// </param>
        /// <param name="@params">[length: pname] 
        /// Specifies the value of pname.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexParameteriv")]
        [CLSCompliant(false)]
        public static unsafe void TexParameter(OpenTK.Graphics.ES20.TextureTarget target, OpenTK.Graphics.ES20.TextureParameterName pname, Int32* @params) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, IntPtr pixels) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[,] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        [CLSCompliant(false)]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T8[,,] pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify a two-dimensional texture subimage
        /// </summary>
        /// <param name="target"> 
        /// Specifies the target texture of the active texture unit. Must be Texture2D, TextureCubeMapPositiveX, TextureCubeMapNegativeX, TextureCubeMapPositiveY, TextureCubeMapNegativeY, TextureCubeMapPositiveZ, or TextureCubeMapNegativeZ.
        /// </param>
        /// <param name="level"> 
        /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
        /// </param>
        /// <param name="xoffset"> 
        /// Specifies a texel offset in the x direction within the texture array.
        /// </param>
        /// <param name="yoffset"> 
        /// Specifies a texel offset in the y direction within the texture array.
        /// </param>
        /// <param name="width"> 
        /// Specifies the width of the texture subimage.
        /// </param>
        /// <param name="height"> 
        /// Specifies the height of the texture subimage.
        /// </param>
        /// <param name="format"> 
        /// Specifies the format of the pixel data. The following symbolic values are accepted: Alpha, Rgb, Rgba, Luminance, and LuminanceAlpha.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, UnsignedShort565, UnsignedShort4444, and UnsignedShort5551.
        /// </param>
        /// <param name="pixels">[length: format,type,width,height] 
        /// Specifies a pointer to the image data in memory.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glTexSubImage2D")]
        public static void TexSubImage2D<T8>(OpenTK.Graphics.ES20.TextureTarget2d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] ref T8 pixels)
            where T8 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1f")]
        public static void Uniform1(Int32 location, Single v0) 
        { 
        	glUniform1f(location, v0);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*1] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*1] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*1] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1fv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform1(Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1i")]
        public static void Uniform1(Int32 location, Int32 v0) 
        { 
        	glUniform1i(location, v0);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*1] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*1] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        [CLSCompliant(false)]
        public static void Uniform1(Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*1] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform1iv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform1(Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2f")]
        public static void Uniform2(Int32 location, Single v0, Single v1) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*2] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*2] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*2] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2fv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform2(Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2i")]
        public static void Uniform2(Int32 location, Int32 v0, Int32 v1) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*2] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        [CLSCompliant(false)]
        public static void Uniform2(Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*2] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform2iv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform2(Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3f")]
        public static void Uniform3(Int32 location, Single v0, Single v1, Single v2) 
        { 
        	glUniform3f(location, v0, v1, v2);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*3] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*3] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*3] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3fv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform3(Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3i")]
        public static void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*3] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*3] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        [CLSCompliant(false)]
        public static void Uniform3(Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*3] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform3iv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform3(Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4f")]
        public static void Uniform4(Int32 location, Single v0, Single v1, Single v2, Single v3) 
        { 
        	glUniform4f(location, v0, v1, v2, v3);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*4] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*4] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*4] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4fv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform4(Int32 location, Int32 count, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="v0"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v1"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v2"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="v3"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4i")]
        public static void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*4] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, Int32[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*4] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        [CLSCompliant(false)]
        public static void Uniform4(Int32 location, Int32 count, ref Int32 value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a uniform variable for the current program object
        /// </summary>
        /// <param name="location"> 
        /// Specifies the location of the uniform variable to be modified.
        /// </param>
        /// <param name="count"> 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        /// <param name="value">[length: count*4] 
        /// Specifies the new values to be used for the specified uniform variable.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniform4iv")]
        [CLSCompliant(false)]
        public static unsafe void Uniform4(Int32 location, Int32 count, Int32* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix2(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*4]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix2fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix3(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*9]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix3fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single* value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single[] value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static void UniformMatrix4(Int32 location, Int32 count, bool transpose, ref Single value) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]</summary>
        /// <param name="location"></param>
        /// <param name="count"></param>
        /// <param name="transpose"></param>
        /// <param name="value">[length: count*16]</param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUniformMatrix4fv")]
        [CLSCompliant(false)]
        public static unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single* value) 
        { 
        	glUniformMatrix4fv(location, count, transpose, value);
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Install a program object as part of current rendering state
        /// </summary>
        /// <param name="program"> 
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
        [CLSCompliant(false)]
        public static void UseProgram(Int32 program) { glUseProgram((uint)program); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Install a program object as part of current rendering state
        /// </summary>
        /// <param name="program"> 
        /// Specifies the handle of the program object whose executables are to be used as part of current rendering state.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glUseProgram")]
        [CLSCompliant(false)]
        public static void UseProgram(UInt32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Validate a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the handle of the program object to be validated.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glValidateProgram")]
        [CLSCompliant(false)]
        public static void ValidateProgram(Int32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Validate a program object
        /// </summary>
        /// <param name="program"> 
        /// Specifies the handle of the program object to be validated.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glValidateProgram")]
        [CLSCompliant(false)]
        public static void ValidateProgram(UInt32 program) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        [CLSCompliant(false)]
        public static void VertexAttrib1(Int32 index, Single x) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1f")]
        [CLSCompliant(false)]
        public static void VertexAttrib1(UInt32 index, Single x) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib1(Int32 index, Single[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib1(Int32 index, Single* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib1(UInt32 index, Single[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 1] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib1fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib1(UInt32 index, Single* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, Single x, Single y) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2f")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, Single x, Single y) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, Single[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(Int32 index, ref Single v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib2(Int32 index, Single* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, Single[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib2(UInt32 index, ref Single v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 2] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib2fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib2(UInt32 index, Single* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, Single x, Single y, Single z) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3f")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, Single x, Single y, Single z) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, Single[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(Int32 index, ref Single v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib3(Int32 index, Single* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, Single[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib3(UInt32 index, ref Single v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 3] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib3fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib3(UInt32 index, Single* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="w"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, Single x, Single y, Single z, Single w) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="x"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="y"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="z"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        /// <param name="w"> 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4f")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, Single x, Single y, Single z, Single w) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, Single[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(Int32 index, ref Single v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(Int32 index, Single* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, Single[] v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static void VertexAttrib4(UInt32 index, ref Single v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Specify the value of a generic vertex attribute
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="v">[length: 4] 
        /// Specifies the new values to be used for the specified vertex attribute.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttrib4fv")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttrib4(UInt32 index, Single* v) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(Int32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static unsafe void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct
         { 
			GCHandle gCHandle = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try
			{
				glVertexAttribPointer((uint)index, size, (int)type, normalized, stride, gCHandle.AddrOfPinnedObject());
			}
			finally
			{
				gCHandle.Free();
			}
        }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(Int32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer(UInt32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer) { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] T5[,,] pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Define an array of generic vertex attribute data
        /// </summary>
        /// <param name="index"> 
        /// Specifies the index of the generic vertex attribute to be modified.
        /// </param>
        /// <param name="size"> 
        /// Specifies the number of components per generic vertex attribute. Must be 1, 2, 3, or 4. The initial value is 4.
        /// </param>
        /// <param name="type"> 
        /// Specifies the data type of each component in the array. Symbolic constants Byte, UnsignedByte, Short, UnsignedShort, Fixed, or Float are accepted. The initial value is Float.
        /// </param>
        /// <param name="normalized"> 
        /// Specifies whether fixed-point data values should be normalized (True) or converted directly as fixed-point values (False) when they are accessed.
        /// </param>
        /// <param name="stride"> 
        /// Specifies the byte offset between consecutive generic vertex attributes. If stride is 0, the generic vertex attributes are understood to be tightly packed in the array. The initial value is 0.
        /// </param>
        /// <param name="pointer">[length: size,type,stride] 
        /// Specifies a pointer to the first component of the first generic vertex attribute in the array. The initial value is 0.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glVertexAttribPointer")]
        [CLSCompliant(false)]
        public static void VertexAttribPointer<T5>(UInt32 index, Int32 size, OpenTK.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, [InAttribute, OutAttribute] ref T5 pointer)
            where T5 : struct
         { throw new NotImplementedException(); }

        /// <summary>[requires: v2.0 or ES_VERSION_2_0]
        /// Set the viewport
        /// </summary>
        /// <param name="x"> 
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="y"> 
        /// Specify the lower left corner of the viewport rectangle, in pixels. The initial value is (0,0).
        /// </param>
        /// <param name="width"> 
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        /// <param name="height"> 
        /// Specify the width and height of the viewport. When a GL context is first attached to a window, width and height are set to the dimensions of that window.
        /// </param>
        [AutoGenerated(Category = "ES_VERSION_2_0", Version = "2.0", EntryPoint = "glViewport")]
        public static void Viewport(Int32 x, Int32 y, Int32 width, Int32 height) 
        { 
        	glViewport(x, y, width, height); 
        }
    }
}
