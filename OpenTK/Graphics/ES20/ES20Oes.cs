//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2013 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

namespace OpenTK.Graphics.ES20
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573
    #pragma warning disable 626

    partial class GL
    { 
        public static partial class Oes
        {
            /// <summary>[requires: OES_vertex_array_object]
            /// Bind a vertex array object
            /// </summary>
            /// <param name="array"> 
            /// Specifies the name of the vertex array to bind.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glBindVertexArrayOES")]
            [CLSCompliant(false)]
            public static void BindVertexArray(Int32 array) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Bind a vertex array object
            /// </summary>
            /// <param name="array"> 
            /// Specifies the name of the vertex array to bind.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glBindVertexArrayOES")]
            [CLSCompliant(false)]
            public static void BindVertexArray(UInt32 array) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            public static void CompressedTexImage3D(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[] data)
                where T8 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,] data)
                where T8 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] T8[,,] data)
                where T8 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 16 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image. All implementations support 3D texture images that are at least 16 texels deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexImage3DOES")]
            public static void CompressedTexImage3D<T8>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.CompressedInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, [InAttribute, OutAttribute] ref T8 data)
                where T8 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            public static void CompressedTexSubImage3D(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, Int32 imageSize, IntPtr data) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[] data)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[,] data)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, Int32 imageSize, [InAttribute, OutAttribute] T10[,,] data)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage in a compressed format
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the compressed image data stored at address data.
            /// </param>
            /// <param name="imageSize"> 
            /// Specifies the number of unsigned bytes of image data starting at the address specified by data.
            /// </param>
            /// <param name="data">[length: imageSize] 
            /// Specifies a pointer to the compressed image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCompressedTexSubImage3DOES")]
            public static void CompressedTexSubImage3D<T10>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, Int32 imageSize, [InAttribute, OutAttribute] ref T10 data)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Copy a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="x"> 
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </param>
            /// <param name="y"> 
            /// Specify the window coordinates of the lower left corner of the rectangular region of pixels to be copied.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glCopyTexSubImage3DOES")]
            public static void CopyTexSubImage3D(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static void DeleteVertexArray(Int32 arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static void DeleteVertexArray(UInt32 arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, Int32[] arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, ref Int32 arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static unsafe void DeleteVertexArrays(Int32 n, Int32* arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, UInt32[] arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static void DeleteVertexArrays(Int32 n, ref UInt32 arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Delete vertex array objects
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array objects to be deleted.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies the address of an array containing the n names of the objects to be deleted.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glDeleteVertexArraysOES")]
            [CLSCompliant(false)]
            public static unsafe void DeleteVertexArrays(Int32 n, UInt32* arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_EGL_image]</summary>
            /// <param name="target"></param>
            /// <param name="image"></param>
            [AutoGenerated(Category = "OES_EGL_image", Version = "", EntryPoint = "glEGLImageTargetRenderbufferStorageOES")]
            public static void EGLImageTargetRenderbufferStorage(OpenTK.Graphics.ES20.All target, IntPtr image) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_EGL_image]</summary>
            /// <param name="target"></param>
            /// <param name="image"></param>
            [AutoGenerated(Category = "OES_EGL_image", Version = "", EntryPoint = "glEGLImageTargetTexture2DOES")]
            public static void EGLImageTargetTexture2D(OpenTK.Graphics.ES20.All target, IntPtr image) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="zoffset"></param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glFramebufferTexture3DOES")]
            [CLSCompliant(false)]
            public static void FramebufferTexture3D(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All textarget, Int32 texture, Int32 level, Int32 zoffset) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]</summary>
            /// <param name="target"></param>
            /// <param name="attachment"></param>
            /// <param name="textarget"></param>
            /// <param name="texture"></param>
            /// <param name="level"></param>
            /// <param name="zoffset"></param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glFramebufferTexture3DOES")]
            [CLSCompliant(false)]
            public static void FramebufferTexture3D(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All attachment, OpenTK.Graphics.ES20.All textarget, UInt32 texture, Int32 level, Int32 zoffset) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static Int32 GenVertexArray() { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute] Int32[] arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute] out Int32 arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static unsafe void GenVertexArrays(Int32 n, [OutAttribute] Int32* arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute] UInt32[] arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static void GenVertexArrays(Int32 n, [OutAttribute] out UInt32 arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Generate vertex array object names
            /// </summary>
            /// <param name="n"> 
            /// Specifies the number of vertex array object names to generate.
            /// </param>
            /// <param name="arrays">[length: n] 
            /// Specifies an array in which the generated vertex array object names are stored.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glGenVertexArraysOES")]
            [CLSCompliant(false)]
            public static unsafe void GenVertexArrays(Int32 n, [OutAttribute] UInt32* arrays) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferPointer pname, [OutAttribute] IntPtr @params) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferPointer pname, [InAttribute, OutAttribute] T2[] @params)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferPointer pname, [InAttribute, OutAttribute] T2[,] @params)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            [CLSCompliant(false)]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferPointer pname, [InAttribute, OutAttribute] T2[,,] @params)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            /// <param name="pname"></param>
            /// <param name="@params"></param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glGetBufferPointervOES")]
            public static void GetBufferPointer<T2>(OpenTK.Graphics.ES20.BufferTarget target, OpenTK.Graphics.ES20.BufferPointer pname, [InAttribute, OutAttribute] ref T2 @params)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Determine if a name corresponds to a vertex array object
            /// </summary>
            /// <param name="array"> 
            /// Specifies a value that may be the name of a vertex array object.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glIsVertexArrayOES")]
            [CLSCompliant(false)]
            public static bool IsVertexArray(Int32 array) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_vertex_array_object]
            /// Determine if a name corresponds to a vertex array object
            /// </summary>
            /// <param name="array"> 
            /// Specifies a value that may be the name of a vertex array object.
            /// </param>
            [AutoGenerated(Category = "OES_vertex_array_object", Version = "", EntryPoint = "glIsVertexArrayOES")]
            [CLSCompliant(false)]
            public static bool IsVertexArray(UInt32 array) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]
            /// Map a buffer object's data store
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target buffer object being mapped. The symbolic constant must be ArrayBuffer, AtomicCounterBuffer, CopyReadBuffer, CopyWriteBuffer, DrawIndirectBuffer, DispatchIndirectBuffer, ElementArrayBuffer, PixelPackBuffer, PixelUnpackBuffer, QueryBuffer, ShaderStorageBuffer, TextureBuffer, TransformFeedbackBuffer or UniformBuffer.
            /// </param>
            /// <param name="access"> 
            /// For glMapBuffer only, specifies the access policy, indicating whether it will be possible to read from, write to, or both read from and write to the buffer object's mapped data store. The symbolic constant must be ReadOnly, WriteOnly, or ReadWrite.
            /// </param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glMapBufferOES")]
            public static IntPtr MapBuffer(OpenTK.Graphics.ES20.All target, OpenTK.Graphics.ES20.All access) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_sample_shading]
            /// Specifies minimum rate at which sample shaing takes place
            /// </summary>
            /// <param name="value"> 
            /// Specifies the rate at which samples are shaded within each covered pixel.
            /// </param>
            [AutoGenerated(Category = "OES_sample_shading", Version = "", EntryPoint = "glMinSampleShadingOES")]
            public static void MinSampleShading(Single value) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary(Int32 program, OpenTK.Graphics.ES20.All binaryFormat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T2[] binary, Int32 length)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T2[,] binary, Int32 length)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T2[,,] binary, Int32 length)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(Int32 program, OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] ref T2 binary, Int32 length)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary(UInt32 program, OpenTK.Graphics.ES20.All binaryFormat, IntPtr binary, Int32 length) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T2[] binary, Int32 length)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T2[,] binary, Int32 length)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] T2[,,] binary, Int32 length)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_get_program_binary]
            /// Load a program object with a program binary
            /// </summary>
            /// <param name="program"> 
            /// Specifies the name of a program object into which to load a program binary.
            /// </param>
            /// <param name="binaryFormat"> 
            /// Specifies the format of the binary data in binary.
            /// </param>
            /// <param name="binary">[length: length] 
            /// Specifies the address an array containing the binary to be loaded into program.
            /// </param>
            /// <param name="length"> 
            /// Specifies the number of bytes contained in binary.
            /// </param>
            [AutoGenerated(Category = "OES_get_program_binary", Version = "", EntryPoint = "glProgramBinaryOES")]
            [CLSCompliant(false)]
            public static void ProgramBinary<T2>(UInt32 program, OpenTK.Graphics.ES20.All binaryFormat, [InAttribute, OutAttribute] ref T2 binary, Int32 length)
                where T2 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            public static void TexImage3D(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, IntPtr pixels) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T9[] pixels)
                where T9 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T9[,] pixels)
                where T9 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            [CLSCompliant(false)]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] T9[,,] pixels)
                where T9 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture image
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be one of Texture3D, ProxyTexture3D, Texture2DArray or ProxyTexture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level  is the n sup th mipmap reduction image.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the number of color components in the texture. Must be one of base internal formats given in Table 1, one of the sized internal formats given in Table 2, or one of the compressed internal formats given in Table 3, below.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture image. All implementations support 3D texture images that are at least 16 texels wide.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture image. All implementations support 3D texture images that are at least 256 texels high.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture image, or the number of layers in a texture array. All implementations support 3D texture images that are at least 256 texels deep, and texture arrays that are at least 256 layers deep.
            /// </param>
            /// <param name="border"> 
            /// This value must be 0.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, Bgra, RedInteger, RgInteger, RgbInteger, BgrInteger, RgbaInteger, BgraInteger, StencilIndex, DepthComponent, DepthStencil.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexImage3DOES")]
            public static void TexImage3D<T9>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, OpenTK.Graphics.ES20.TextureComponentCount internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, OpenTK.Graphics.ES20.PixelFormat format, OpenTK.Graphics.ES20.PixelType type, [InAttribute, OutAttribute] ref T9 pixels)
                where T9 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_storage_multisample_2d_array]
            /// Specify storage for a two-dimensional multisample array texture
            /// </summary>
            /// <param name="target"> 
            /// Specify the target of the operation. target must be Texture2DMultisampleArray or ProxyTexture2DMultisampleMultisample.
            /// </param>
            /// <param name="samples"> 
            /// Specify the number of samples in the texture.
            /// </param>
            /// <param name="internalformat"> 
            /// Specifies the sized internal format to be used to store texture image data.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture, in texels.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture, in texels.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture, in layers.
            /// </param>
            /// <param name="fixedsamplelocations"> 
            /// Specifies whether the image will use identical sample locations and the same number of samples for all texels in the image, and the sample locations will not depend on the internal format or size of the image.
            /// </param>
            [AutoGenerated(Category = "OES_texture_storage_multisample_2d_array", Version = "", EntryPoint = "glTexStorage3DMultisampleOES")]
            public static void TexStorage3DMultisample(OpenTK.Graphics.ES20.All target, Int32 samples, OpenTK.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            public static void TexSubImage3D(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, IntPtr pixels) { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T10[] pixels)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T10[,] pixels)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            [CLSCompliant(false)]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] T10[,,] pixels)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_texture_3D]
            /// Specify a three-dimensional texture subimage
            /// </summary>
            /// <param name="target"> 
            /// Specifies the target texture. Must be Texture3D or Texture2DArray.
            /// </param>
            /// <param name="level"> 
            /// Specifies the level-of-detail number. Level 0 is the base image level. Level n is the nth mipmap reduction image.
            /// </param>
            /// <param name="xoffset"> 
            /// Specifies a texel offset in the x direction within the texture array.
            /// </param>
            /// <param name="yoffset"> 
            /// Specifies a texel offset in the y direction within the texture array.
            /// </param>
            /// <param name="zoffset"> 
            /// Specifies a texel offset in the z direction within the texture array.
            /// </param>
            /// <param name="width"> 
            /// Specifies the width of the texture subimage.
            /// </param>
            /// <param name="height"> 
            /// Specifies the height of the texture subimage.
            /// </param>
            /// <param name="depth"> 
            /// Specifies the depth of the texture subimage.
            /// </param>
            /// <param name="format"> 
            /// Specifies the format of the pixel data. The following symbolic values are accepted: Red, Rg, Rgb, Bgr, Rgba, DepthComponent, and StencilIndex.
            /// </param>
            /// <param name="type"> 
            /// Specifies the data type of the pixel data. The following symbolic values are accepted: UnsignedByte, Byte, UnsignedShort, Short, UnsignedInt, Int, Float, UnsignedByte332, UnsignedByte233Rev, UnsignedShort565, UnsignedShort565Rev, UnsignedShort4444, UnsignedShort4444Rev, UnsignedShort5551, UnsignedShort1555Rev, UnsignedInt8888, UnsignedInt8888Rev, UnsignedInt1010102, and UnsignedInt2101010Rev.
            /// </param>
            /// <param name="pixels">[length: format,type,width,height,depth] 
            /// Specifies a pointer to the image data in memory.
            /// </param>
            [AutoGenerated(Category = "OES_texture_3D", Version = "", EntryPoint = "glTexSubImage3DOES")]
            public static void TexSubImage3D<T10>(OpenTK.Graphics.ES20.TextureTarget3d target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, OpenTK.Graphics.ES20.All format, OpenTK.Graphics.ES20.All type, [InAttribute, OutAttribute] ref T10 pixels)
                where T10 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: OES_mapbuffer]</summary>
            /// <param name="target"></param>
            [AutoGenerated(Category = "OES_mapbuffer", Version = "", EntryPoint = "glUnmapBufferOES")]
            public static bool UnmapBuffer(OpenTK.Graphics.ES20.BufferTarget target) { throw new NotImplementedException(); }

        }
    }
}
