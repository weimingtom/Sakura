//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2013 Stefanos Apostolopoulos for the Open Toolkit Library
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//

namespace OpenTK.Graphics.ES20
{
    using System;
    using System.Text;
    using System.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573
    #pragma warning disable 626

    partial class GL
    {
       public static partial class Amd
        {
            [CLSCompliant(false)]
            public static void BeginPerfMonitor(Int32 monitor) 
            { 
            	glBeginPerfMonitorAMD((UInt32)monitor); 
            }
            [CLSCompliant(false)]
            public static void BeginPerfMonitor(UInt32 monitor) 
            { 
            	glBeginPerfMonitorAMD(monitor); 
            }

            
            
            [CLSCompliant(false)]
            public unsafe static void DeletePerfMonitor(Int32 monitors) 
            { 
            	Int32[] monitors_ = new Int32[] { monitors };
            	fixed (Int32* ptr = monitors_)
				{
            		glDeletePerfMonitorsAMD(1, (UInt32 *)ptr);
				}
            }
            [CLSCompliant(false)]
            public unsafe static void DeletePerfMonitor(UInt32 monitors) 
            { 
            	UInt32[] monitors_ = new UInt32[] { monitors };
            	fixed (UInt32* ptr = monitors_)
				{
            		glDeletePerfMonitorsAMD(1, ptr);
				}
            }
            [CLSCompliant(false)]
            public unsafe static void DeletePerfMonitors(Int32 n, Int32[] monitors) 
            { 
				fixed (Int32* ptr = monitors)
				{
					glDeletePerfMonitorsAMD(n, (UInt32 *)ptr);
				}
            }
            [CLSCompliant(false)]
            public unsafe static void DeletePerfMonitors(Int32 n, ref Int32 monitors) 
            { 
            	fixed (Int32* ptr = &monitors)
				{
            		glDeletePerfMonitorsAMD(n, (UInt32*)ptr);
            		monitors = *ptr; //FIXME:
				}
            }
            [CLSCompliant(false)]
            public unsafe static void DeletePerfMonitors(Int32 n, Int32* monitors) 
            {
            	glDeletePerfMonitorsAMD(n, (UInt32*)monitors);
			}
            [CLSCompliant(false)]
            public unsafe static void DeletePerfMonitors(Int32 n, UInt32[] monitors) 
            { 
				fixed (UInt32* ptr = monitors)
				{
					glDeletePerfMonitorsAMD(n, ptr);
				}
            }
            [CLSCompliant(false)]
            public unsafe static void DeletePerfMonitors(Int32 n, ref UInt32 monitors) 
            { 
				fixed (UInt32* ptr = &monitors)
				{
					glDeletePerfMonitorsAMD(n, ptr);
					monitors = *ptr; //FIXME:
				}
            }
            [CLSCompliant(false)]
            public unsafe static void DeletePerfMonitors(Int32 n, UInt32* monitors) 
            { 
				glDeletePerfMonitorsAMD(n, monitors);
			}


            
            
            [CLSCompliant(false)]
            public static void EndPerfMonitor(Int32 monitor) 
            { 
            	glEndPerfMonitorAMD((UInt32)monitor);
            }
            [CLSCompliant(false)]
            public static void EndPerfMonitor(UInt32 monitor) 
            { 
            	glEndPerfMonitorAMD(monitor);
            }

            
            
            /// <summary>[requires: AMD_performance_monitor]</summary>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGenPerfMonitorsAMD")]
            [CLSCompliant(false)]
            public unsafe static Int32 GenPerfMonitor() 
            { 
            	Int32[] monitors = new Int32[1];
				fixed (Int32* ptr = monitors)
				{
					glGenPerfMonitorsAMD(1, (UInt32 *)ptr);
				}
				return monitors[0];
            }
            [CLSCompliant(false)]
            public unsafe static void GenPerfMonitors(Int32 n, [OutAttribute] Int32[] monitors) 
            { 
				fixed (Int32* ptr = monitors)
				{
					glGenPerfMonitorsAMD(n, (UInt32 *)ptr);
				}
            }
            [CLSCompliant(false)]
            public unsafe static void GenPerfMonitors(Int32 n, [OutAttribute] out Int32 monitors) 
            { 
				fixed (Int32* ptr = &monitors)
				{
					glGenPerfMonitorsAMD(n, (UInt32 *)ptr);
					monitors = *ptr;
				}
            }
            [CLSCompliant(false)]
            public static unsafe void GenPerfMonitors(Int32 n, [OutAttribute] Int32* monitors) 
            { 
            	glGenPerfMonitorsAMD(n, (UInt32 *)monitors);
            }
            [CLSCompliant(false)]
            public unsafe static void GenPerfMonitors(Int32 n, [OutAttribute] UInt32[] monitors) 
            { 
				fixed (UInt32* ptr = monitors)
				{
					glGenPerfMonitorsAMD(n, ptr);
				}
            }
            [CLSCompliant(false)]
            public unsafe static void GenPerfMonitors(Int32 n, [OutAttribute] out UInt32 monitors) 
            { 
				fixed (UInt32* ptr = &monitors)
				{
					glGenPerfMonitorsAMD(n, ptr);
					monitors = *ptr;
				}
            }
            [CLSCompliant(false)]
            public unsafe static void GenPerfMonitors(Int32 n, [OutAttribute] UInt32* monitors) 
            { 
				glGenPerfMonitorsAMD(n, monitors);
			}

            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterData(Int32 monitor, OpenTK.Graphics.ES20.All pname, Int32 dataSize, [OutAttribute] Int32[] data, [OutAttribute] out Int32 bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterData(Int32 monitor, OpenTK.Graphics.ES20.All pname, Int32 dataSize, [OutAttribute] out Int32 data, [OutAttribute] out Int32 bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounterData(Int32 monitor, OpenTK.Graphics.ES20.All pname, Int32 dataSize, [OutAttribute] Int32* data, [OutAttribute] Int32* bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterData(UInt32 monitor, OpenTK.Graphics.ES20.All pname, Int32 dataSize, [OutAttribute] UInt32[] data, [OutAttribute] out Int32 bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterData(UInt32 monitor, OpenTK.Graphics.ES20.All pname, Int32 dataSize, [OutAttribute] out UInt32 data, [OutAttribute] out Int32 bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="pname"></param>
            /// <param name="dataSize"></param>
            /// <param name="data">[length: dataSize]</param>
            /// <param name="bytesWritten">[length: 1]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterDataAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounterData(UInt32 monitor, OpenTK.Graphics.ES20.All pname, Int32 dataSize, [OutAttribute] UInt32* data, [OutAttribute] Int32* bytesWritten) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo(Int32 group, Int32 counter, OpenTK.Graphics.ES20.All pname, [OutAttribute] IntPtr data) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T3[] data)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T3[,] data)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T3[,,] data)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] ref T3 data)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo(UInt32 group, UInt32 counter, OpenTK.Graphics.ES20.All pname, [OutAttribute] IntPtr data) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T3[] data)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T3[,] data)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] T3[,,] data)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="pname"></param>
            /// <param name="data">[length: pname]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterInfoAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, OpenTK.Graphics.ES20.All pname, [InAttribute, OutAttribute] ref T3 data)
                where T3 : struct
             { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounters(Int32 group, [OutAttribute] out Int32 numCounters, [OutAttribute] out Int32 maxActiveCounters, Int32 counterSize, [OutAttribute] Int32[] counters) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounters(Int32 group, [OutAttribute] out Int32 numCounters, [OutAttribute] out Int32 maxActiveCounters, Int32 counterSize, [OutAttribute] out Int32 counters) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounters(Int32 group, [OutAttribute] Int32* numCounters, [OutAttribute] Int32* maxActiveCounters, Int32 counterSize, [OutAttribute] Int32* counters) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounters(UInt32 group, [OutAttribute] out Int32 numCounters, [OutAttribute] out Int32 maxActiveCounters, Int32 counterSize, [OutAttribute] UInt32[] counters) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounters(UInt32 group, [OutAttribute] out Int32 numCounters, [OutAttribute] out Int32 maxActiveCounters, Int32 counterSize, [OutAttribute] out UInt32 counters) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="numCounters">[length: 1]</param>
            /// <param name="maxActiveCounters">[length: 1]</param>
            /// <param name="counterSize"></param>
            /// <param name="counters">[length: counterSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounters(UInt32 group, [OutAttribute] Int32* numCounters, [OutAttribute] Int32* maxActiveCounters, Int32 counterSize, [OutAttribute] UInt32* counters) { throw new NotImplementedException(); }

            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="counterString">[length: bufSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterStringAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterString(Int32 group, Int32 counter, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder counterString) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="counterString">[length: bufSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterStringAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounterString(Int32 group, Int32 counter, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder counterString) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="counterString">[length: bufSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterStringAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorCounterString(UInt32 group, UInt32 counter, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder counterString) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="counter"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="counterString">[length: bufSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorCounterStringAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorCounterString(UInt32 group, UInt32 counter, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder counterString) { throw new NotImplementedException(); }

            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroups([OutAttribute] out Int32 numGroups, Int32 groupsSize, [OutAttribute] Int32[] groups) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroups([OutAttribute] out Int32 numGroups, Int32 groupsSize, [OutAttribute] out Int32 groups) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroups([OutAttribute] out Int32 numGroups, Int32 groupsSize, [OutAttribute] UInt32[] groups) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroups([OutAttribute] out Int32 numGroups, Int32 groupsSize, [OutAttribute] out UInt32 groups) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorGroups([OutAttribute] Int32* numGroups, Int32 groupsSize, [OutAttribute] Int32* groups) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="numGroups">[length: 1]</param>
            /// <param name="groupsSize"></param>
            /// <param name="groups">[length: groupsSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupsAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorGroups([OutAttribute] Int32* numGroups, Int32 groupsSize, [OutAttribute] UInt32* groups) { throw new NotImplementedException(); }

            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="groupString">[length: bufSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupStringAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroupString(Int32 group, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder groupString) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="groupString">[length: bufSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupStringAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorGroupString(Int32 group, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder groupString) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="groupString">[length: bufSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupStringAMD")]
            [CLSCompliant(false)]
            public static void GetPerfMonitorGroupString(UInt32 group, Int32 bufSize, [OutAttribute] out Int32 length, [OutAttribute] StringBuilder groupString) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="group"></param>
            /// <param name="bufSize"></param>
            /// <param name="length">[length: 1]</param>
            /// <param name="groupString">[length: bufSize]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glGetPerfMonitorGroupStringAMD")]
            [CLSCompliant(false)]
            public static unsafe void GetPerfMonitorGroupString(UInt32 group, Int32 bufSize, [OutAttribute] Int32* length, [OutAttribute] StringBuilder groupString) { throw new NotImplementedException(); }

            
            
            
            
            
            
            
            
            
            
            
            
            
            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, [OutAttribute] Int32[] counterList) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, [OutAttribute] out Int32 counterList) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static unsafe void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, [OutAttribute] Int32* counterList) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, [OutAttribute] UInt32[] counterList) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, [OutAttribute] out UInt32 counterList) { throw new NotImplementedException(); }

            /// <summary>[requires: AMD_performance_monitor]</summary>
            /// <param name="monitor"></param>
            /// <param name="enable"></param>
            /// <param name="group"></param>
            /// <param name="numCounters"></param>
            /// <param name="counterList">[length: numCounters]</param>
            [AutoGenerated(Category = "AMD_performance_monitor", Version = "", EntryPoint = "glSelectPerfMonitorCountersAMD")]
            [CLSCompliant(false)]
            public static unsafe void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, [OutAttribute] UInt32* counterList) { throw new NotImplementedException(); }

        }    	
    }
}